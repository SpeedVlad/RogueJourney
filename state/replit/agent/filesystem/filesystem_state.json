{"file_contents":{"App.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport { useAudio } from \"./lib/stores/useAudio\";\nimport { useRoguelike } from \"./lib/stores/useRoguelike\";\nimport GameCanvas from \"./components/game/GameCanvas\";\nimport GameUI from \"./components/game/GameUI\";\nimport Inventory from \"./components/game/Inventory\";\nimport \"@fontsource/inter\";\nimport \"./index.css\";\n\nfunction App() {\n  const { initializeAudio } = useAudio();\n  const { gameState, initializeGame, handleInput } = useRoguelike();\n  const gameInitialized = useRef(false);\n\n  // Initialize game and audio\n  useEffect(() => {\n    if (!gameInitialized.current) {\n      initializeAudio();\n      initializeGame();\n      gameInitialized.current = true;\n    }\n  }, [initializeAudio, initializeGame]);\n\n  // Handle keyboard input\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (gameState?.gamePhase === 'playing') {\n        handleInput(event.key);\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [gameState?.gamePhase, handleInput]);\n\n  if (!gameState) {\n    return (\n      <div className=\"w-full h-full flex items-center justify-center bg-black text-white\">\n        <div>Initializing Roguelike...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-full h-full relative bg-black overflow-hidden\">\n      <GameCanvas />\n      <GameUI />\n      {gameState.showInventory && <Inventory />}\n      \n      {/* Game Over Screen */}\n      {gameState.gamePhase === 'gameOver' && (\n        <div className=\"absolute inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50\">\n          <div className=\"text-center text-white\">\n            <h1 className=\"text-4xl font-bold mb-4\">Game Over</h1>\n            <p className=\"text-xl mb-4\">Level Reached: {gameState.level}</p>\n            <p className=\"text-lg mb-6\">Score: {gameState.score}</p>\n            <button\n              className=\"px-6 py-3 bg-red-600 hover:bg-red-700 text-white rounded-lg font-semibold transition-colors\"\n              onClick={() => window.location.reload()}\n            >\n              Play Again\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Instructions */}\n      {gameState.gamePhase === 'ready' && (\n        <div className=\"absolute inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50\">\n          <div className=\"text-center text-white max-w-md\">\n            <h1 className=\"text-4xl font-bold mb-6\">Roguelike Dungeon</h1>\n            <div className=\"text-left space-y-2 mb-6\">\n              <p><span className=\"text-yellow-400\">WASD/Arrow Keys:</span> Move</p>\n              <p><span className=\"text-yellow-400\">Space:</span> Attack</p>\n              <p><span className=\"text-yellow-400\">I:</span> Toggle Inventory</p>\n              <p><span className=\"text-yellow-400\">E:</span> Use Stairs</p>\n              <p><span className=\"text-yellow-400\">R:</span> Restart Game</p>\n            </div>\n            <button\n              className=\"px-8 py-4 bg-green-600 hover:bg-green-700 text-white rounded-lg font-semibold transition-colors\"\n              onClick={() => useRoguelike.getState().startGame()}\n            >\n              Start Adventure\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","size_bytes":3361},"DungeonGenerator.ts":{"content":"import { Dungeon, Room, Tile, Position } from './entities';\nimport { generateRandomItem } from './items';\n\nexport class DungeonGenerator {\n  private width: number;\n  private height: number;\n  private minRoomSize: number = 4;\n  private maxRoomSize: number = 12;\n  private maxRooms: number = 15;\n\n  constructor(width: number = 80, height: number = 50) {\n    this.width = width;\n    this.height = height;\n  }\n\n  generate(): Dungeon {\n    console.log(\"Generating dungeon...\");\n    \n    const tiles: Tile[] = [];\n    const rooms: Room[] = [];\n\n    // Initialize all tiles as walls\n    for (let y = 0; y < this.height; y++) {\n      for (let x = 0; x < this.width; x++) {\n        tiles.push({\n          type: 'wall',\n          x,\n          y,\n          symbol: '#',\n          color: '#444444'\n        });\n      }\n    }\n\n    // Generate rooms\n    for (let i = 0; i < this.maxRooms; i++) {\n      const room = this.generateRoom();\n      if (this.canPlaceRoom(room, rooms)) {\n        this.carveRoom(room, tiles);\n        rooms.push(room);\n      }\n    }\n\n    // Connect rooms with corridors\n    this.connectRooms(rooms, tiles);\n\n    // Place stairs in the last room\n    const stairsRoom = rooms[rooms.length - 1];\n    const stairs: Position = {\n      x: stairsRoom.centerX,\n      y: stairsRoom.centerY\n    };\n\n    // Set stairs tile\n    const stairsIndex = stairs.y * this.width + stairs.x;\n    tiles[stairsIndex] = {\n      type: 'stairs',\n      x: stairs.x,\n      y: stairs.y,\n      symbol: '>',\n      color: '#ffff00'\n    };\n\n    // Generate items\n    const items = this.generateItems(rooms);\n\n    console.log(`Generated dungeon with ${rooms.length} rooms`);\n\n    return {\n      width: this.width,\n      height: this.height,\n      tiles,\n      rooms,\n      stairs,\n      items\n    };\n  }\n\n  private generateRoom(): Room {\n    const width = Math.floor(Math.random() * (this.maxRoomSize - this.minRoomSize + 1)) + this.minRoomSize;\n    const height = Math.floor(Math.random() * (this.maxRoomSize - this.minRoomSize + 1)) + this.minRoomSize;\n    const x = Math.floor(Math.random() * (this.width - width - 1)) + 1;\n    const y = Math.floor(Math.random() * (this.height - height - 1)) + 1;\n\n    return {\n      x,\n      y,\n      width,\n      height,\n      centerX: x + Math.floor(width / 2),\n      centerY: y + Math.floor(height / 2),\n      connected: false\n    };\n  }\n\n  private canPlaceRoom(newRoom: Room, existingRooms: Room[]): boolean {\n    for (const room of existingRooms) {\n      if (newRoom.x < room.x + room.width + 1 &&\n          newRoom.x + newRoom.width + 1 > room.x &&\n          newRoom.y < room.y + room.height + 1 &&\n          newRoom.y + newRoom.height + 1 > room.y) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private carveRoom(room: Room, tiles: Tile[]): void {\n    for (let y = room.y; y < room.y + room.height; y++) {\n      for (let x = room.x; x < room.x + room.width; x++) {\n        const index = y * this.width + x;\n        tiles[index] = {\n          type: 'floor',\n          x,\n          y,\n          symbol: '.',\n          color: '#666666'\n        };\n      }\n    }\n  }\n\n  private connectRooms(rooms: Room[], tiles: Tile[]): void {\n    for (let i = 1; i < rooms.length; i++) {\n      const roomA = rooms[i - 1];\n      const roomB = rooms[i];\n      \n      this.createCorridor(roomA.centerX, roomA.centerY, roomB.centerX, roomB.centerY, tiles);\n    }\n  }\n\n  private createCorridor(x1: number, y1: number, x2: number, y2: number, tiles: Tile[]): void {\n    // Create L-shaped corridor\n    let currentX = x1;\n    let currentY = y1;\n\n    // Move horizontally first\n    while (currentX !== x2) {\n      const index = currentY * this.width + currentX;\n      if (tiles[index].type === 'wall') {\n        tiles[index] = {\n          type: 'floor',\n          x: currentX,\n          y: currentY,\n          symbol: '.',\n          color: '#666666'\n        };\n      }\n      currentX += currentX < x2 ? 1 : -1;\n    }\n\n    // Then move vertically\n    while (currentY !== y2) {\n      const index = currentY * this.width + currentX;\n      if (tiles[index].type === 'wall') {\n        tiles[index] = {\n          type: 'floor',\n          x: currentX,\n          y: currentY,\n          symbol: '.',\n          color: '#666666'\n        };\n      }\n      currentY += currentY < y2 ? 1 : -1;\n    }\n  }\n\n  private generateItems(rooms: Room[]): Array<{ x: number; y: number } & any> {\n    const items: Array<{ x: number; y: number } & any> = [];\n    \n    // Generate 1-3 items per room (excluding first room which is for player spawn)\n    for (let i = 1; i < rooms.length; i++) {\n      const room = rooms[i];\n      const itemCount = Math.floor(Math.random() * 3) + 1;\n      \n      for (let j = 0; j < itemCount; j++) {\n        const item = generateRandomItem();\n        const x = room.x + Math.floor(Math.random() * (room.width - 2)) + 1;\n        const y = room.y + Math.floor(Math.random() * (room.height - 2)) + 1;\n        \n        items.push({\n          ...item,\n          x,\n          y\n        });\n      }\n    }\n    \n    return items;\n  }\n}\n","size_bytes":5039},"GameCanvas.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport { useRoguelike } from \"../../lib/stores/useRoguelike\";\nimport { GameRenderer } from \"../../lib/game/renderer\";\n\nconst GameCanvas = () => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const rendererRef = useRef<GameRenderer | null>(null);\n  const { gameState } = useRoguelike();\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const context = canvas.getContext('2d');\n    if (!context) return;\n\n    // Initialize renderer\n    rendererRef.current = new GameRenderer(context);\n\n    // Set canvas size\n    const resizeCanvas = () => {\n      const rect = canvas.getBoundingClientRect();\n      canvas.width = rect.width * window.devicePixelRatio;\n      canvas.height = rect.height * window.devicePixelRatio;\n      context.scale(window.devicePixelRatio, window.devicePixelRatio);\n    };\n\n    resizeCanvas();\n    window.addEventListener('resize', resizeCanvas);\n\n    return () => {\n      window.removeEventListener('resize', resizeCanvas);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!rendererRef.current) return;\n\n    let animationId: number;\n    \n    // Continuous animation loop for aura effects\n    const animate = () => {\n      if (rendererRef.current && gameState) {\n        rendererRef.current.render(gameState);\n      }\n      animationId = requestAnimationFrame(animate);\n    };\n    \n    animate();\n\n    return () => {\n      if (animationId) {\n        cancelAnimationFrame(animationId);\n      }\n    };\n  }, [gameState]);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      className=\"w-full h-full absolute inset-0\"\n      style={{ imageRendering: 'pixelated' }}\n    />\n  );\n};\n\nexport default GameCanvas;\n","size_bytes":1709},"GameEngine.ts":{"content":"import { GameState, Player, Enemy, Position, Message, Item } from './entities';\nimport { DungeonGenerator } from './DungeonGenerator';\nimport { findPath, getSimpleDirection } from './pathfinding';\nimport { performAttack, gainExperience, getEnemyName } from './combat';\nimport { generateRandomItem } from './items';\nimport { useRoguelike } from '../stores/useRoguelike';\n\nexport class GameEngine {\n  private gameState: GameState | null = null;\n\n  initialize(): GameState {\n    console.log(\"Initializing game engine\");\n    \n    const dungeonGenerator = new DungeonGenerator(80, 50);\n    const dungeon = dungeonGenerator.generate();\n    \n    // Create player\n    const startRoom = dungeon.rooms[0];\n    const player: Player = {\n      id: 'player',\n      x: startRoom.centerX,\n      y: startRoom.centerY,\n      symbol: '👾',\n      color: '#00aaff',\n      health: 100,\n      maxHealth: 100,\n      mana: 50,\n      maxMana: 50,\n      attackPower: 10,\n      defense: 2,\n      speed: 1,\n      lastMoveTime: 0,\n      level: 1,\n      experience: 0,\n      experienceToNext: 100,\n      inventory: [],\n      inventorySize: 20,\n      weapon: null,\n      armor: null,\n      aura: null\n    };\n\n    // Generate enemies\n    const enemies = this.generateEnemies(dungeon);\n\n    // Calculate initial visibility with expanded range\n    const visibleTiles = this.calculateVisibility(player, dungeon.tiles, dungeon.width, dungeon.height);\n    const exploredTiles = [...visibleTiles];\n\n    this.gameState = {\n      gamePhase: 'ready',\n      level: 1,\n      score: 0,\n      player,\n      enemies,\n      dungeon,\n      visibleTiles,\n      exploredTiles,\n      messages: [\n        { text: \"Welcome to the dungeon! Find the stairs to descend deeper.\", type: 'info', timestamp: Date.now() }\n      ],\n      showInventory: false\n    };\n\n    return this.gameState;\n  }\n\n  startGame(): GameState {\n    if (!this.gameState) throw new Error(\"Game not initialized\");\n    \n    this.gameState.gamePhase = 'playing';\n    this.addMessage(\"Your adventure begins! Use WASD to move, Space to attack, I for inventory.\");\n    \n    return this.gameState;\n  }\n\n  movePlayer(dx: number, dy: number): GameState {\n    if (!this.gameState || this.gameState.gamePhase !== 'playing') {\n      return this.gameState!;\n    }\n\n    const newX = this.gameState.player.x + dx;\n    const newY = this.gameState.player.y + dy;\n\n    // Check bounds\n    if (newX < 0 || newX >= this.gameState.dungeon.width || \n        newY < 0 || newY >= this.gameState.dungeon.height) {\n      return this.gameState;\n    }\n\n    // Check for wall collision\n    const tileIndex = newY * this.gameState.dungeon.width + newX;\n    const tile = this.gameState.dungeon.tiles[tileIndex];\n    if (tile.type === 'wall') {\n      return this.gameState;\n    }\n\n    // Check for enemy collision\n    const enemyAtPosition = this.gameState.enemies.find(e => e.x === newX && e.y === newY);\n    if (enemyAtPosition) {\n      // Attack enemy instead of moving\n      return this.attackEnemy(enemyAtPosition);\n    }\n\n    // Create new state with updated player position\n    this.gameState = {\n      ...this.gameState,\n      player: {\n        ...this.gameState.player,\n        x: newX,\n        y: newY\n      }\n    };\n\n    // Check for item pickup\n    this.checkItemPickup();\n\n    // Update visibility\n    this.updateVisibility();\n\n    return this.gameState;\n  }\n\n  playerAttack(): GameState {\n    if (!this.gameState || this.gameState.gamePhase !== 'playing') {\n      return this.gameState!;\n    }\n\n    // Find enemies adjacent to player\n    const adjacentEnemies = this.gameState.enemies.filter(enemy => {\n      const dx = Math.abs(enemy.x - this.gameState!.player.x);\n      const dy = Math.abs(enemy.y - this.gameState!.player.y);\n      return (dx === 1 && dy === 0) || (dx === 0 && dy === 1);\n    });\n\n    if (adjacentEnemies.length === 0) {\n      this.addMessage(\"There's nothing to attack here.\");\n      return this.gameState;\n    }\n\n    // Attack the first adjacent enemy\n    return this.attackEnemy(adjacentEnemies[0]);\n  }\n\n  useStairs(): GameState {\n    if (!this.gameState || this.gameState.gamePhase !== 'playing') {\n      return this.gameState!;\n    }\n\n    const { player, dungeon } = this.gameState;\n    \n    // Check if player is on stairs\n    if (player.x === dungeon.stairs.x && player.y === dungeon.stairs.y) {\n      return this.descendLevel();\n    } else {\n      this.addMessage(\"You need to find the stairs first! Look for '>' symbol.\");\n      return this.gameState;\n    }\n  }\n\n  deleteItem(index: number): GameState {\n    if (!this.gameState || index >= this.gameState.player.inventory.length) {\n      return this.gameState!;\n    }\n\n    const item = this.gameState.player.inventory[index];\n    const newInventory = [...this.gameState.player.inventory];\n    newInventory.splice(index, 1);\n\n    this.gameState = {\n      ...this.gameState,\n      player: {\n        ...this.gameState.player,\n        inventory: newInventory\n      }\n    };\n\n    this.addMessage(`You destroy ${item.name}.`, 'info');\n    return this.gameState;\n  }\n\n  mergeItems(index1: number, index2: number): GameState {\n    if (!this.gameState || \n        index1 >= this.gameState.player.inventory.length ||\n        index2 >= this.gameState.player.inventory.length ||\n        index1 === index2) {\n      return this.gameState!;\n    }\n\n    const item1 = this.gameState.player.inventory[index1];\n    const item2 = this.gameState.player.inventory[index2];\n\n    // Only merge items of same type and rarity\n    if (item1.type !== item2.type || item1.rarity !== item2.rarity) {\n      this.addMessage(\"Cannot merge different types or rarities.\", 'info');\n      return this.gameState;\n    }\n\n    // Create merged item with enhanced stats\n    const mergedItem = { ...item1 };\n    mergedItem.name = `Enhanced ${item1.name}`;\n    \n    if (item1.damage) mergedItem.damage = Math.floor((item1.damage + (item2.damage || 0)) * 1.2);\n    if (item1.defense) mergedItem.defense = Math.floor((item1.defense + (item2.defense || 0)) * 1.2);\n    if (item1.healthBonus) mergedItem.healthBonus = Math.floor((item1.healthBonus + (item2.healthBonus || 0)) * 1.2);\n    if (item1.manaBonus) mergedItem.manaBonus = Math.floor((item1.manaBonus + (item2.manaBonus || 0)) * 1.2);\n    if (item1.healingPower) mergedItem.healingPower = Math.floor((item1.healingPower + (item2.healingPower || 0)) * 1.2);\n\n    // Remove both items and add merged item\n    const newInventory = [...this.gameState.player.inventory];\n    const higherIndex = Math.max(index1, index2);\n    const lowerIndex = Math.min(index1, index2);\n    \n    newInventory.splice(higherIndex, 1);\n    newInventory.splice(lowerIndex, 1);\n    newInventory.push(mergedItem);\n\n    this.gameState = {\n      ...this.gameState,\n      player: {\n        ...this.gameState.player,\n        inventory: newInventory\n      }\n    };\n\n    this.addMessage(`You merge the items creating ${mergedItem.name}!`, 'success');\n    return this.gameState;\n  }\n\n  useItem(index: number): GameState {\n    if (!this.gameState || index >= this.gameState.player.inventory.length) {\n      return this.gameState!;\n    }\n\n    const item = this.gameState.player.inventory[index];\n    \n    if (item.type !== 'consumable') {\n      this.addMessage(\"This item cannot be consumed.\");\n      return this.gameState;\n    }\n\n    // Calculate effects\n    let newHealth = this.gameState.player.health;\n    let newMana = this.gameState.player.mana;\n    let healthGained = 0;\n    let manaGained = 0;\n\n    if (item.healingPower) {\n      const healthBefore = newHealth;\n      newHealth = Math.min(\n        this.gameState.player.maxHealth, \n        newHealth + item.healingPower\n      );\n      healthGained = newHealth - healthBefore;\n    }\n\n    if (item.manaPower) {\n      const manaBefore = newMana;\n      newMana = Math.min(\n        this.gameState.player.maxMana, \n        newMana + item.manaPower\n      );\n      manaGained = newMana - manaBefore;\n    }\n\n    // Remove item from inventory\n    const newInventory = [...this.gameState.player.inventory];\n    newInventory.splice(index, 1);\n\n    this.gameState = {\n      ...this.gameState,\n      player: {\n        ...this.gameState.player,\n        health: newHealth,\n        mana: newMana,\n        inventory: newInventory\n      },\n      showInventory: true  // Keep inventory open\n    };\n\n    // Add message\n    let message = `You use ${item.name}.`;\n    if (healthGained > 0) message += ` +${healthGained} health.`;\n    if (manaGained > 0) message += ` +${manaGained} mana.`;\n    \n    this.addMessage(message, 'success');\n\n    return this.gameState;\n  }\n\n  equipItem(index: number): GameState {\n    if (!this.gameState || index >= this.gameState.player.inventory.length) {\n      return this.gameState!;\n    }\n\n    const item = this.gameState.player.inventory[index];\n    let newInventory = [...this.gameState.player.inventory];\n    let newPlayer = { ...this.gameState.player };\n    \n    if (item.type === 'weapon') {\n      // Unequip current weapon\n      if (this.gameState.player.weapon) {\n        newInventory.push(this.gameState.player.weapon);\n        newPlayer.attackPower -= this.gameState.player.weapon.damage || 0;\n      }\n      \n      // Equip new weapon\n      newPlayer.weapon = item;\n      newPlayer.attackPower += item.damage || 0;\n      \n      this.addMessage(`You equip ${item.name}.`, 'success');\n    } else if (item.type === 'armor') {\n      // Unequip current armor\n      if (this.gameState.player.armor) {\n        newInventory.push(this.gameState.player.armor);\n        newPlayer.defense -= this.gameState.player.armor.defense || 0;\n      }\n      \n      // Equip new armor\n      newPlayer.armor = item;\n      newPlayer.defense += item.defense || 0;\n      \n      this.addMessage(`You equip ${item.name}.`, 'success');\n    } else if (item.type === 'aura') {\n      // Unequip current aura\n      if (this.gameState.player.aura) {\n        newInventory.push(this.gameState.player.aura);\n        if (this.gameState.player.aura.healthBonus) {\n          newPlayer.maxHealth -= this.gameState.player.aura.healthBonus;\n          newPlayer.health = Math.min(newPlayer.health, newPlayer.maxHealth);\n        }\n        if (this.gameState.player.aura.manaBonus) {\n          newPlayer.maxMana -= this.gameState.player.aura.manaBonus;\n          newPlayer.mana = Math.min(newPlayer.mana, newPlayer.maxMana);\n        }\n      }\n      \n      // Equip new aura\n      newPlayer.aura = item;\n      if (item.healthBonus) {\n        newPlayer.maxHealth += item.healthBonus;\n        newPlayer.health += item.healthBonus; // Heal when equipping\n      }\n      if (item.manaBonus) {\n        newPlayer.maxMana += item.manaBonus;\n        newPlayer.mana += item.manaBonus; // Restore mana when equipping\n      }\n      \n      this.addMessage(`You equip ${item.name}.`, 'success');\n    } else {\n      this.addMessage(\"This item cannot be equipped.\");\n      return this.gameState;\n    }\n\n    // Remove from inventory\n    newInventory.splice(index, 1);\n    newPlayer.inventory = newInventory;\n\n    this.gameState = {\n      ...this.gameState,\n      player: newPlayer,\n      showInventory: true  // Keep inventory open\n    };\n\n    return this.gameState;\n  }\n\n  unequipItem(type: 'weapon' | 'armor' | 'aura'): GameState {\n    if (!this.gameState) return this.gameState!;\n\n    let newPlayer = { ...this.gameState.player };\n    let newInventory = [...this.gameState.player.inventory];\n\n    if (type === 'weapon' && newPlayer.weapon) {\n      // Remove weapon stats\n      newPlayer.attackPower -= newPlayer.weapon.damage || 0;\n      \n      // Add to inventory\n      newInventory.push(newPlayer.weapon);\n      newPlayer.weapon = null;\n      \n      this.addMessage(`You unequip your weapon.`, 'info');\n    } else if (type === 'armor' && newPlayer.armor) {\n      // Remove armor stats\n      newPlayer.defense -= newPlayer.armor.defense || 0;\n      \n      // Add to inventory\n      newInventory.push(newPlayer.armor);\n      newPlayer.armor = null;\n      \n      this.addMessage(`You unequip your armor.`, 'info');\n    } else if (type === 'aura' && newPlayer.aura) {\n      // Remove aura stats\n      if (newPlayer.aura.healthBonus) {\n        newPlayer.maxHealth -= newPlayer.aura.healthBonus;\n        newPlayer.health = Math.min(newPlayer.health, newPlayer.maxHealth);\n      }\n      if (newPlayer.aura.manaBonus) {\n        newPlayer.maxMana -= newPlayer.aura.manaBonus;\n        newPlayer.mana = Math.min(newPlayer.mana, newPlayer.maxMana);\n      }\n      \n      // Add to inventory\n      newInventory.push(newPlayer.aura);\n      newPlayer.aura = null;\n      \n      this.addMessage(`You unequip your aura.`, 'info');\n    } else {\n      this.addMessage(`No ${type} equipped.`, 'info');\n      return this.gameState;\n    }\n\n    newPlayer.inventory = newInventory;\n\n    this.gameState = {\n      ...this.gameState,\n      player: newPlayer,\n      showInventory: true  // Keep inventory open\n    };\n\n    return this.gameState;\n  }\n\n  updateGame(): GameState {\n    if (!this.gameState || this.gameState.gamePhase !== 'playing') {\n      return this.gameState!;\n    }\n\n    // Update enemies\n    this.updateEnemies();\n\n    return this.gameState;\n  }\n\n  private generateEnemies(dungeon: any): Enemy[] {\n    const enemies: Enemy[] = [];\n    const enemyTypes = [\n      { type: 'goblin', symbol: '👽', color: '#00aa00', health: 20, attack: 5, defense: 1, exp: 15 },\n      { type: 'orc', symbol: '👹', color: '#aa0000', health: 35, attack: 8, defense: 2, exp: 25 },\n      { type: 'skeleton', symbol: '💀', color: '#cccccc', health: 15, attack: 6, defense: 0, exp: 20 }\n    ];\n\n    // Generate 2-4 enemies per room (excluding first room)\n    for (let i = 1; i < dungeon.rooms.length; i++) {\n      const room = dungeon.rooms[i];\n      const enemyCount = Math.floor(Math.random() * 3) + 2;\n      \n      for (let j = 0; j < enemyCount; j++) {\n        const enemyType = enemyTypes[Math.floor(Math.random() * enemyTypes.length)];\n        const x = room.x + Math.floor(Math.random() * (room.width - 2)) + 1;\n        const y = room.y + Math.floor(Math.random() * (room.height - 2)) + 1;\n        \n        enemies.push({\n          id: `${enemyType.type}_${i}_${j}`,\n          x,\n          y,\n          symbol: enemyType.symbol,\n          color: enemyType.color,\n          health: enemyType.health,\n          maxHealth: enemyType.health,\n          attackPower: enemyType.attack,\n          defense: enemyType.defense,\n          speed: 1,\n          lastMoveTime: 0,\n          type: enemyType.type as any,\n          ai: 'aggressive',\n          experienceValue: enemyType.exp,\n          lootTable: []\n        });\n      }\n    }\n\n    return enemies;\n  }\n\n  private calculateVisibility(player: Player, tiles: any[], width: number, height: number): Position[] {\n    const visible: Position[] = [];\n    const radius = 8; // Increased vision radius to see corridors immediately\n\n    for (let dy = -radius; dy <= radius; dy++) {\n      for (let dx = -radius; dx <= radius; dx++) {\n        const x = player.x + dx;\n        const y = player.y + dy;\n        \n        if (x < 0 || x >= width || y < 0 || y >= height) continue;\n        \n        const distance = Math.sqrt(dx * dx + dy * dy);\n        if (distance <= radius) {\n          // Simple line-of-sight check\n          if (this.hasLineOfSight(player.x, player.y, x, y, tiles, width)) {\n            visible.push({ x, y });\n          }\n        }\n      }\n    }\n\n    return visible;\n  }\n\n  private hasLineOfSight(x1: number, y1: number, x2: number, y2: number, tiles: any[], width: number): boolean {\n    // Bresenham's line algorithm for line of sight\n    const dx = Math.abs(x2 - x1);\n    const dy = Math.abs(y2 - y1);\n    const sx = x1 < x2 ? 1 : -1;\n    const sy = y1 < y2 ? 1 : -1;\n    let err = dx - dy;\n\n    let x = x1;\n    let y = y1;\n\n    while (true) {\n      if (x === x2 && y === y2) break;\n      \n      // Check if current tile blocks vision (except the target tile)\n      if (!(x === x2 && y === y2)) {\n        const tileIndex = y * width + x;\n        if (tiles[tileIndex] && tiles[tileIndex].type === 'wall') {\n          return false;\n        }\n      }\n\n      const e2 = 2 * err;\n      if (e2 > -dy) {\n        err -= dy;\n        x += sx;\n      }\n      if (e2 < dx) {\n        err += dx;\n        y += sy;\n      }\n    }\n\n    return true;\n  }\n\n  private updateVisibility(): void {\n    if (!this.gameState) return;\n    \n    const visibleTiles = this.calculateVisibility(\n      this.gameState.player, \n      this.gameState.dungeon.tiles, \n      this.gameState.dungeon.width, \n      this.gameState.dungeon.height\n    );\n\n    // Add newly visible tiles to explored tiles\n    const exploredTiles = [...this.gameState.exploredTiles];\n    for (const visible of visibleTiles) {\n      if (!exploredTiles.some(explored => explored.x === visible.x && explored.y === visible.y)) {\n        exploredTiles.push(visible);\n      }\n    }\n\n    this.gameState = {\n      ...this.gameState,\n      visibleTiles,\n      exploredTiles\n    };\n  }\n\n  private checkItemPickup(): void {\n    if (!this.gameState) return;\n\n    const player = this.gameState.player;\n    const itemsAtPosition = this.gameState.dungeon.items.filter(\n      item => item.x === player.x && item.y === player.y\n    );\n\n    if (itemsAtPosition.length > 0) {\n      let pickedUpItems: any[] = [];\n      let remainingItems = [...this.gameState.dungeon.items];\n      \n      for (const item of itemsAtPosition) {\n        if (player.inventory.length + pickedUpItems.length < player.inventorySize) {\n          pickedUpItems.push(item);\n          const itemIndex = remainingItems.findIndex(i => i.id === item.id);\n          if (itemIndex >= 0) {\n            remainingItems.splice(itemIndex, 1);\n          }\n        } else {\n          this.addMessage(\"Your inventory is full!\");\n          break;\n        }\n      }\n      \n      if (pickedUpItems.length > 0) {\n        this.gameState = {\n          ...this.gameState,\n          player: {\n            ...this.gameState.player,\n            inventory: [...this.gameState.player.inventory, ...pickedUpItems]\n          },\n          dungeon: {\n            ...this.gameState.dungeon,\n            items: remainingItems\n          }\n        };\n        \n        if (pickedUpItems.length === 1) {\n          this.addMessage(`You pick up ${pickedUpItems[0].name}.`, 'success');\n        } else {\n          this.addMessage(`You pick up ${pickedUpItems.length} items.`, 'success');\n        }\n      }\n    }\n  }\n\n  private attackEnemy(enemy: Enemy): GameState {\n    if (!this.gameState) return this.gameState!;\n\n    const player = this.gameState.player;\n    \n    // Add attack animation state\n    this.gameState = {\n      ...this.gameState,\n      player: {\n        ...player,\n        isAttacking: true,\n        attackTarget: { x: enemy.x, y: enemy.y }\n      }\n    };\n    \n    // Remove attack animation after delay\n    setTimeout(() => {\n      if (this.gameState) {\n        this.gameState = {\n          ...this.gameState,\n          player: {\n            ...this.gameState.player,\n            isAttacking: false,\n            attackTarget: undefined\n          }\n        };\n      }\n    }, 300);\n    \n    const result = performAttack(player, enemy);\n    \n    this.addMessage(result.message, 'damage');\n\n    if (result.killed) {\n      // Remove enemy\n      const newEnemies = this.gameState.enemies.filter(e => e.id !== enemy.id);\n      \n      // Grant experience\n      const expResult = gainExperience(player, enemy.experienceValue);\n      \n      // Add score\n      const newScore = this.gameState.score + enemy.experienceValue * 10;\n      \n      // Maybe drop loot\n      let newItems = [...this.gameState.dungeon.items];\n      if (Math.random() < 0.3) {\n        const loot = generateRandomItem();\n        newItems.push({\n          ...loot,\n          x: enemy.x,\n          y: enemy.y\n        });\n        this.addMessage(`${getEnemyName(enemy)} drops ${loot.name}!`);\n      }\n\n      this.gameState = {\n        ...this.gameState,\n        enemies: newEnemies,\n        player: expResult.newPlayer,\n        score: newScore,\n        dungeon: {\n          ...this.gameState.dungeon,\n          items: newItems\n        }\n      };\n      \n      this.addMessage(expResult.message, 'success');\n    }\n\n    return this.gameState;\n  }\n\n  private updateEnemies(): void {\n    if (!this.gameState) return;\n\n    const currentTime = Date.now();\n    let playerUpdated = false;\n    let gamePhaseChanged = false;\n    \n    const updatedEnemies = this.gameState.enemies.map(enemy => {\n      // Simple AI: move towards player if visible, attack if adjacent\n      const distance = Math.abs(enemy.x - this.gameState!.player.x) + \n                     Math.abs(enemy.y - this.gameState!.player.y);\n      \n      // Only act if player is within reasonable distance and it's time to move\n      if (distance <= 10 && currentTime - enemy.lastMoveTime >= 500) {\n        const updatedEnemy = { ...enemy, lastMoveTime: currentTime };\n        \n        // Check if adjacent to player\n        if (distance === 1) {\n          // Attack player\n          const result = performAttack(enemy, this.gameState!.player);\n          this.addMessage(result.message, 'damage');\n          \n          if (result.killed) {\n            gamePhaseChanged = true;\n            this.addMessage(\"You have died! Game Over.\", 'damage');\n          }\n          \n          return updatedEnemy;\n        } else if (distance <= 8) {\n          // Move towards player\n          const direction = getSimpleDirection(\n            { x: enemy.x, y: enemy.y },\n            { x: this.gameState!.player.x, y: this.gameState!.player.y }\n          );\n          \n          const newX = enemy.x + direction.x;\n          const newY = enemy.y + direction.y;\n          \n          // Check if move is valid\n          if (this.isValidMove(newX, newY)) {\n            return { ...updatedEnemy, x: newX, y: newY };\n          }\n        }\n        \n        return updatedEnemy;\n      }\n      \n      return enemy;\n    });\n\n    this.gameState = {\n      ...this.gameState,\n      enemies: updatedEnemies,\n      gamePhase: gamePhaseChanged ? 'gameOver' : this.gameState.gamePhase\n    };\n  }\n\n  private isValidMove(x: number, y: number): boolean {\n    if (!this.gameState) return false;\n    \n    // Check bounds\n    if (x < 0 || x >= this.gameState.dungeon.width || \n        y < 0 || y >= this.gameState.dungeon.height) {\n      return false;\n    }\n    \n    // Check for wall\n    const tileIndex = y * this.gameState.dungeon.width + x;\n    if (this.gameState.dungeon.tiles[tileIndex].type === 'wall') {\n      return false;\n    }\n    \n    // Check for other enemies\n    if (this.gameState.enemies.some(e => e.x === x && e.y === y)) {\n      return false;\n    }\n    \n    // Check for player\n    if (this.gameState.player.x === x && this.gameState.player.y === y) {\n      return false;\n    }\n    \n    return true;\n  }\n\n  private descendLevel(): GameState {\n    if (!this.gameState) return this.gameState!;\n\n    this.addMessage(`You descend to level ${this.gameState.level + 1}!`, 'success');\n    this.gameState.level++;\n    this.gameState.score += 1000;\n\n    // Generate new dungeon\n    const dungeonGenerator = new DungeonGenerator(80, 50);\n    const newDungeon = dungeonGenerator.generate();\n    \n    // Place player at start of new level\n    const startRoom = newDungeon.rooms[0];\n    this.gameState.player.x = startRoom.centerX;\n    this.gameState.player.y = startRoom.centerY;\n    \n    // Generate stronger enemies based on level\n    this.gameState.dungeon = newDungeon;\n    this.gameState.enemies = this.generateStrongerEnemies(newDungeon, this.gameState.level);\n    \n    // Update visibility\n    this.updateVisibility();\n    this.gameState.exploredTiles = [...this.gameState.visibleTiles];\n\n    return this.gameState;\n  }\n\n  private generateStrongerEnemies(dungeon: any, level: number): Enemy[] {\n    const enemies = this.generateEnemies(dungeon);\n    \n    // Scale enemy stats based on dungeon level\n    const scaleFactor = 1 + (level - 1) * 0.3;\n    \n    return enemies.map(enemy => ({\n      ...enemy,\n      maxHealth: Math.floor(enemy.maxHealth * scaleFactor),\n      health: Math.floor(enemy.health * scaleFactor),\n      attackPower: Math.floor(enemy.attackPower * scaleFactor),\n      defense: Math.floor(enemy.defense * scaleFactor),\n      experienceValue: Math.floor(enemy.experienceValue * scaleFactor)\n    }));\n  }\n\n  private addMessage(text: string, type: 'info' | 'damage' | 'success' = 'info'): void {\n    const message: Message = { text, type, timestamp: Date.now() };\n    useRoguelike.getState().addMessage(text, type);\n  }\n}\n","size_bytes":24488},"GameUI.tsx":{"content":"import { useRoguelike } from \"../../lib/stores/useRoguelike\";\nimport { useAudio } from \"../../lib/stores/useAudio\";\nimport ProgressBar from \"../ui/ProgressBar\";\nimport { Volume2, VolumeX } from \"lucide-react\";\n\nconst GameUI = () => {\n  const { gameState } = useRoguelike();\n  const { isMuted, toggleMute } = useAudio();\n\n  if (!gameState || gameState.gamePhase !== 'playing') {\n    return null;\n  }\n\n  const { player } = gameState;\n\n  return (\n    <div className=\"absolute inset-0 pointer-events-none\">\n      {/* Top UI Bar */}\n      <div className=\"absolute top-4 left-4 right-4 flex justify-between items-start pointer-events-auto\">\n        {/* Player Stats */}\n        <div className=\"bg-black bg-opacity-80 text-white p-4 rounded-lg border border-gray-600\">\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-red-400\">❤</span>\n              <ProgressBar \n                current={player.health} \n                max={player.maxHealth} \n                color=\"bg-red-500\" \n                width=\"120px\"\n              />\n              <span className=\"text-sm\">{player.health}/{player.maxHealth}</span>\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-orange-400\">🔥</span>\n              <span className=\"text-sm font-bold\">{player.attackPower}</span>\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-blue-400\">🛡️</span>\n              <span className=\"text-sm font-bold\">{player.defense}</span>\n            </div>\n            \n            <div className=\"text-sm space-y-1\">\n              <div>Level: {gameState.level}</div>\n              <div>XP: {player.experience}</div>\n            </div>\n          </div>\n        </div>\n\n        {/* Controls */}\n        <div className=\"flex gap-2\">\n          <button\n            onClick={toggleMute}\n            className=\"bg-black bg-opacity-80 text-white p-2 rounded-lg border border-gray-600 hover:bg-opacity-100 transition-all\"\n          >\n            {isMuted ? <VolumeX size={20} /> : <Volume2 size={20} />}\n          </button>\n        </div>\n      </div>\n\n\n\n      {/* Bottom Message Log */}\n      <div className=\"absolute bottom-4 left-4 right-4 bg-black bg-opacity-80 text-white p-4 rounded-lg border border-gray-600 pointer-events-auto max-h-32 overflow-y-auto\">\n        <div className=\"space-y-1 text-sm\">\n          {gameState.messages.slice(-5).map((message, index) => (\n            <div key={index} className={`${message.type === 'damage' ? 'text-red-400' : message.type === 'success' ? 'text-green-400' : 'text-gray-300'}`}>\n              {message.text}\n            </div>\n          ))}\n        </div>\n      </div>\n\n\n    </div>\n  );\n};\n\nexport default GameUI;\n","size_bytes":2846},"Inventory.tsx":{"content":"import { useRoguelike } from \"../../lib/stores/useRoguelike\";\nimport { Item } from \"../../lib/game/entities\";\nimport { X, Trash2, Merge, ArrowUpDown, Star, Sword } from \"lucide-react\";\nimport { useState } from \"react\";\n\nconst Inventory = () => {\n  const { gameState, closeInventory, useItem, equipItem, deleteItem, mergeItems, unequipItem } = useRoguelike();\n  const [selectedItems, setSelectedItems] = useState<number[]>([]);\n  const [hoveredItem, setHoveredItem] = useState<number | null>(null);\n  const [sortBy, setSortBy] = useState<'rarity' | 'enhancement' | 'type'>(() => {\n    return localStorage.getItem('inventorySortBy') as 'rarity' | 'enhancement' | 'type' || 'rarity';\n  });\n\n  if (!gameState) return null;\n\n  const { player } = gameState;\n\n  const handleItemClick = (item: Item, index: number) => {\n    if (selectedItems.includes(index)) {\n      // Deselect item\n      setSelectedItems(selectedItems.filter(i => i !== index));\n    } else {\n      // Add to selection\n      setSelectedItems([...selectedItems, index]);\n    }\n  };\n\n  const handleUseOrEquip = (item: Item, index: number) => {\n    if (item.type === 'consumable') {\n      useItem(index);\n    } else if (item.type === 'weapon' || item.type === 'armor' || item.type === 'aura') {\n      equipItem(index);\n    }\n    setSelectedItems([]); // Clear selection after use/equip\n  };\n\n  const handleDeleteItem = (index: number) => {\n    deleteItem(index);\n    setSelectedItems([]);\n  };\n\n  const handleMergeItems = () => {\n    if (selectedItems.length === 2) {\n      mergeItems(selectedItems[0], selectedItems[1]);\n      setSelectedItems([]);\n    }\n  };\n\n  const getItemTypeColor = (type: string) => {\n    switch (type) {\n      case 'weapon': return 'text-red-400';\n      case 'armor': return 'text-blue-400';\n      case 'aura': return 'text-purple-400';\n      case 'consumable': return 'text-green-400';\n      default: return 'text-gray-400';\n    }\n  };\n\n  const getItemTypeIcon = (type: string) => {\n    switch (type) {\n      case 'weapon': return '⚔️';\n      case 'armor': return '🛡️';\n      case 'aura': return '✨';\n      case 'consumable': return '❤️';\n      default: return '📦';\n    }\n  };\n\n  const getEnhancementRank = (item: Item) => {\n    if (!item.name.includes('Enhanced')) return null;\n    \n    // Count how many times \"Enhanced\" appears to determine rank\n    const enhancementLevel = (item.name.match(/Enhanced/g) || []).length;\n    \n    if (enhancementLevel >= 1 && enhancementLevel <= 10) {\n      return { text: `Bronze Rank ${enhancementLevel}`, color: 'text-orange-600' };\n    } else if (enhancementLevel >= 11 && enhancementLevel <= 20) {\n      return { text: `Silver Rank ${enhancementLevel}`, color: 'text-gray-300' };\n    } else if (enhancementLevel >= 21 && enhancementLevel <= 30) {\n      return { text: `Gold Rank ${enhancementLevel}`, color: 'text-yellow-400' };\n    }\n    return null;\n  };\n\n  const formatItemName = (item: Item) => {\n    const baseName = item.name.replace(/Enhanced\\s*/g, '');\n    const rank = getEnhancementRank(item);\n    return rank ? `${baseName}` : baseName;\n  };\n\n  const sortItems = (items: Item[]) => {\n    const itemsWithIndex = items.map((item, index) => ({ item, index }));\n    \n    return itemsWithIndex.sort((a, b) => {\n      if (sortBy === 'rarity') {\n        const rarityOrder = { 'legendary': 4, 'rare': 3, 'uncommon': 2, 'common': 1 };\n        return (rarityOrder[b.item.rarity as keyof typeof rarityOrder] || 0) - \n               (rarityOrder[a.item.rarity as keyof typeof rarityOrder] || 0);\n      } else if (sortBy === 'enhancement') {\n        const aLevel = (a.item.name.match(/Enhanced/g) || []).length;\n        const bLevel = (b.item.name.match(/Enhanced/g) || []).length;\n        return bLevel - aLevel;\n      } else if (sortBy === 'type') {\n        return a.item.type.localeCompare(b.item.type);\n      }\n      return 0;\n    });\n  };\n\n  const handleAutoMerge = () => {\n    // Merge ALL pairs of same type and rarity\n    const items = player.inventory;\n    let mergedAny = false;\n    \n    // Keep merging until no more pairs can be merged\n    while (true) {\n      let foundPair = false;\n      \n      for (let i = 0; i < items.length - 1; i++) {\n        for (let j = i + 1; j < items.length; j++) {\n          if (items[i] && items[j] && \n              items[i].type === items[j].type && \n              items[i].rarity === items[j].rarity) {\n            mergeItems(i, j);\n            foundPair = true;\n            mergedAny = true;\n            break;\n          }\n        }\n        if (foundPair) break;\n      }\n      \n      if (!foundPair) break;\n    }\n    \n    if (!mergedAny) {\n      // Show message if nothing to merge\n      console.log('No items to merge');\n    }\n  };\n\n  const handleDeleteAll = () => {\n    // Delete all selected items\n    selectedItems.sort((a, b) => b - a).forEach(index => deleteItem(index));\n    setSelectedItems([]);\n  };\n\n  const handleDeleteAllUnequipped = () => {\n    // Delete all unequipped items\n    const indices = [];\n    for (let i = player.inventory.length - 1; i >= 0; i--) {\n      indices.push(i);\n    }\n    indices.forEach(index => deleteItem(index));\n  };\n\n  const handleEquipBest = () => {\n    // Find best weapon, armor, and aura\n    const weapons = player.inventory.filter(item => item.type === 'weapon');\n    const armors = player.inventory.filter(item => item.type === 'armor');\n    const auras = player.inventory.filter(item => item.type === 'aura');\n    \n    const getBestItem = (items: Item[]) => {\n      return items.reduce((best, current) => {\n        const bestLevel = (best.name.match(/Enhanced/g) || []).length;\n        const currentLevel = (current.name.match(/Enhanced/g) || []).length;\n        \n        if (currentLevel > bestLevel) return current;\n        \n        if (currentLevel === bestLevel) {\n          const rarityOrder = { 'legendary': 4, 'rare': 3, 'uncommon': 2, 'common': 1 };\n          const bestRarity = rarityOrder[best.rarity as keyof typeof rarityOrder] || 0;\n          const currentRarity = rarityOrder[current.rarity as keyof typeof rarityOrder] || 0;\n          \n          if (currentRarity > bestRarity) return current;\n          \n          if (currentRarity === bestRarity) {\n            const bestStat = (best.damage || best.defense || 0);\n            const currentStat = (current.damage || current.defense || 0);\n            return currentStat > bestStat ? current : best;\n          }\n        }\n        \n        return best;\n      });\n    };\n    \n    if (weapons.length > 0) {\n      const bestWeapon = getBestItem(weapons);\n      const weaponIndex = player.inventory.findIndex(item => item === bestWeapon);\n      if (weaponIndex >= 0) equipItem(weaponIndex);\n    }\n    \n    if (armors.length > 0) {\n      const bestArmor = getBestItem(armors);\n      const armorIndex = player.inventory.findIndex(item => item === bestArmor);\n      if (armorIndex >= 0) equipItem(armorIndex);\n    }\n    \n    if (auras.length > 0) {\n      const bestAura = getBestItem(auras);\n      const auraIndex = player.inventory.findIndex(item => item === bestAura);\n      if (auraIndex >= 0) equipItem(auraIndex);\n    }\n  };\n\n  const canMergeItems = () => {\n    // Check if we have at least 3 items of the same type and rarity\n    const itemGroups: { [key: string]: Item[] } = {};\n    \n    player.inventory.forEach(item => {\n      const key = `${item.type}-${item.rarity}`;\n      if (!itemGroups[key]) itemGroups[key] = [];\n      itemGroups[key].push(item);\n    });\n    \n    return Object.values(itemGroups).some(group => group.length >= 3);\n  };\n\n  const handleSortChange = (newSort: 'rarity' | 'enhancement' | 'type') => {\n    setSortBy(newSort);\n    localStorage.setItem('inventorySortBy', newSort);\n  };\n\n  return (\n    <div className=\"absolute inset-0 bg-black bg-opacity-80 flex items-center justify-center z-40\">\n      <div className=\"bg-gray-900 border border-gray-600 rounded-lg p-6 max-w-6xl w-full mx-4 max-h-[80vh] overflow-y-auto\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center mb-4\">\n          <h2 className=\"text-2xl font-bold text-white\">Inventory</h2>\n          <div className=\"flex gap-2 items-center\">\n            {/* Sorting Controls */}\n            <div className=\"flex gap-1\">\n              <button\n                onClick={() => handleSortChange('rarity')}\n                className={`px-2 py-1 text-xs rounded flex items-center gap-1 ${\n                  sortBy === 'rarity' ? 'bg-blue-600 text-white' : 'bg-gray-600 text-gray-300'\n                }`}\n              >\n                <Star size={12} />\n                Rarity\n              </button>\n              <button\n                onClick={() => handleSortChange('enhancement')}\n                className={`px-2 py-1 text-xs rounded flex items-center gap-1 ${\n                  sortBy === 'enhancement' ? 'bg-blue-600 text-white' : 'bg-gray-600 text-gray-300'\n                }`}\n              >\n                <ArrowUpDown size={12} />\n                Rank\n              </button>\n              <button\n                onClick={() => handleSortChange('type')}\n                className={`px-2 py-1 text-xs rounded flex items-center gap-1 ${\n                  sortBy === 'type' ? 'bg-blue-600 text-white' : 'bg-gray-600 text-gray-300'\n                }`}\n              >\n                <Sword size={12} />\n                Type\n              </button>\n            </div>\n            \n            {/* Action Buttons */}\n            <button\n              onClick={handleEquipBest}\n              className=\"px-2 py-1 bg-blue-600 text-white rounded hover:bg-blue-700 text-xs\"\n            >\n              Equip Best\n            </button>\n            {canMergeItems() && (\n              <button\n                onClick={handleAutoMerge}\n                className=\"px-2 py-1 bg-green-600 text-white rounded hover:bg-green-700 text-xs\"\n              >\n                Auto Merge\n              </button>\n            )}\n            {selectedItems.length === 0 && player.inventory.length > 0 && (\n              <button\n                onClick={handleDeleteAllUnequipped}\n                className=\"px-2 py-1 bg-red-600 text-white rounded hover:bg-red-700 text-xs\"\n              >\n                Delete All\n              </button>\n            )}\n            {selectedItems.length > 0 && (\n              <button\n                onClick={handleDeleteAll}\n                className=\"px-2 py-1 bg-red-600 text-white rounded hover:bg-red-700 text-xs\"\n              >\n                Delete\n              </button>\n            )}\n            <button\n              onClick={closeInventory}\n              className=\"text-gray-400 hover:text-white transition-colors\"\n            >\n              <X size={24} />\n            </button>\n          </div>\n        </div>\n\n        {/* Stats */}\n        <div className=\"grid grid-cols-4 gap-4 mb-6 text-white\">\n          <div className=\"bg-gray-800 p-3 rounded flex items-center gap-2\">\n            <span className=\"text-red-400\">❤️</span>\n            <div>\n              <div className=\"text-sm text-gray-400\">Health</div>\n              <div className=\"text-lg font-bold text-red-400\">{player.health}/{player.maxHealth}</div>\n            </div>\n          </div>\n          <div className=\"bg-gray-800 p-3 rounded flex items-center gap-2\">\n            <span className=\"text-orange-400\">🔥</span>\n            <div>\n              <div className=\"text-sm text-gray-400\">Attack</div>\n              <div className=\"text-lg font-bold text-orange-400\">{player.attackPower}</div>\n            </div>\n          </div>\n          <div className=\"bg-gray-800 p-3 rounded flex items-center gap-2\">\n            <span className=\"text-blue-400\">🛡️</span>\n            <div>\n              <div className=\"text-sm text-gray-400\">Defense</div>\n              <div className=\"text-lg font-bold text-blue-400\">{player.defense}</div>\n            </div>\n          </div>\n          <div className=\"bg-gray-800 p-3 rounded flex items-center gap-2\">\n            <span className=\"text-yellow-400\">⭐</span>\n            <div>\n              <div className=\"text-sm text-gray-400\">Level</div>\n              <div className=\"text-lg font-bold text-yellow-400\">{gameState.level}</div>\n            </div>\n          </div>\n        </div>\n\n        {/* Equipment */}\n        <div className=\"mb-6\">\n          <h3 className=\"text-lg font-semibold text-white mb-2\">Equipment</h3>\n          <div className=\"grid grid-cols-3 gap-4\">\n            <div className=\"bg-gray-800 p-3 rounded border border-gray-600\">\n              <div className=\"text-sm text-gray-400 mb-1\">Weapon</div>\n              {player.weapon ? (\n                <div className=\"text-white\">\n                  <div className=\"font-semibold flex items-center gap-2\">\n                    <span>⚔️</span>\n                    <span>{formatItemName(player.weapon)}</span>\n                    {getEnhancementRank(player.weapon) && (\n                      <span className={`text-xs px-1 py-0.5 rounded bg-gray-700 ${getEnhancementRank(player.weapon)!.color}`}>\n                        {getEnhancementRank(player.weapon)!.text}\n                      </span>\n                    )}\n                    {player.weapon.damage && <span className=\"text-red-400\">+{player.weapon.damage}</span>}\n                    <span className={`text-xs px-2 py-1 rounded ${\n                      player.weapon.rarity === 'legendary' ? 'bg-orange-600' :\n                      player.weapon.rarity === 'rare' ? 'bg-purple-600' :\n                      player.weapon.rarity === 'uncommon' ? 'bg-blue-600' :\n                      'bg-gray-600'\n                    }`}>\n                      {player.weapon.rarity}\n                    </span>\n                  </div>\n                  <div className=\"text-sm text-gray-300\">{player.weapon.description}</div>\n                  <button\n                    onClick={() => unequipItem('weapon')}\n                    className=\"text-xs text-red-400 hover:text-red-300 mt-1\"\n                  >\n                    Unequip\n                  </button>\n                </div>\n              ) : (\n                <div className=\"text-gray-500\">None equipped</div>\n              )}\n            </div>\n            <div className=\"bg-gray-800 p-3 rounded border border-gray-600\">\n              <div className=\"text-sm text-gray-400 mb-1\">Armor</div>\n              {player.armor ? (\n                <div className=\"text-white\">\n                  <div className=\"font-semibold flex items-center gap-2\">\n                    <span>🛡️</span>\n                    <span>{formatItemName(player.armor)}</span>\n                    {getEnhancementRank(player.armor) && (\n                      <span className={`text-xs px-1 py-0.5 rounded bg-gray-700 ${getEnhancementRank(player.armor)!.color}`}>\n                        {getEnhancementRank(player.armor)!.text}\n                      </span>\n                    )}\n                    {player.armor.defense && <span className=\"text-blue-400\">+{player.armor.defense}</span>}\n                    <span className={`text-xs px-2 py-1 rounded ${\n                      player.armor.rarity === 'legendary' ? 'bg-orange-600' :\n                      player.armor.rarity === 'rare' ? 'bg-purple-600' :\n                      player.armor.rarity === 'uncommon' ? 'bg-blue-600' :\n                      'bg-gray-600'\n                    }`}>\n                      {player.armor.rarity}\n                    </span>\n                  </div>\n                  <div className=\"text-sm text-gray-300\">{player.armor.description}</div>\n                  <button\n                    onClick={() => unequipItem('armor')}\n                    className=\"text-xs text-red-400 hover:text-red-300 mt-1\"\n                  >\n                    Unequip\n                  </button>\n                </div>\n              ) : (\n                <div className=\"text-gray-500\">None equipped</div>\n              )}\n            </div>\n            <div className=\"bg-gray-800 p-3 rounded border border-gray-600\">\n              <div className=\"text-sm text-gray-400 mb-1\">Aura</div>\n              {player.aura ? (\n                <div className=\"text-white\">\n                  <div className=\"font-semibold flex items-center gap-2\">\n                    <span>✨</span>\n                    <span>{formatItemName(player.aura)}</span>\n                    {getEnhancementRank(player.aura) && (\n                      <span className={`text-xs px-1 py-0.5 rounded bg-gray-700 ${getEnhancementRank(player.aura)!.color}`}>\n                        {getEnhancementRank(player.aura)!.text}\n                      </span>\n                    )}\n                    <div className=\"flex gap-1\">\n                      {player.aura.healthBonus && <span className=\"text-red-400\">+{player.aura.healthBonus}❤️</span>}\n                      {player.aura.experienceBonus && <span className=\"text-green-400\">+{player.aura.experienceBonus}%XP</span>}\n                    </div>\n                    <span className={`text-xs px-2 py-1 rounded ${\n                      player.aura.rarity === 'legendary' ? 'bg-orange-600' :\n                      player.aura.rarity === 'rare' ? 'bg-purple-600' :\n                      player.aura.rarity === 'uncommon' ? 'bg-blue-600' :\n                      'bg-gray-600'\n                    }`}>\n                      {player.aura.rarity}\n                    </span>\n                  </div>\n                  <div className=\"text-sm text-gray-300\">{player.aura.description}</div>\n                  <button\n                    onClick={() => unequipItem('aura')}\n                    className=\"text-xs text-red-400 hover:text-red-300 mt-1\"\n                  >\n                    Unequip\n                  </button>\n                </div>\n              ) : (\n                <div className=\"text-gray-500\">None equipped</div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Inventory Items */}\n        <div>\n          <h3 className=\"text-lg font-semibold text-white mb-2\">\n            Items ({player.inventory.length}/{player.inventorySize})\n          </h3>\n          {player.inventory.length === 0 ? (\n            <div className=\"text-gray-500 text-center py-8\">\n              Your inventory is empty\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 gap-2\">\n              {sortItems(player.inventory).map(({ item, index }) => (\n                <div\n                  key={index}\n                  onClick={() => handleItemClick(item, index)}\n                  onMouseEnter={() => setHoveredItem(index)}\n                  onMouseLeave={() => setHoveredItem(null)}\n                  className={`p-3 rounded cursor-pointer transition-all relative ${\n                    selectedItems.includes(index) \n                      ? 'bg-purple-900 border-purple-400' \n                      : 'bg-gray-800 hover:bg-gray-700 border-gray-600'\n                  } border ${hoveredItem === index ? 'scale-105 shadow-lg' : ''}`}\n                >\n                  <div className=\"flex justify-between items-start\">\n                    <div className=\"flex-1\">\n                      <div className=\"font-semibold text-white flex items-center gap-2\">\n                        <span>{getItemTypeIcon(item.type)}</span>\n                        <span>{item.symbol}</span>\n                        <span>{formatItemName(item)}</span>\n                        {getEnhancementRank(item) && (\n                          <span className={`text-xs px-2 py-1 rounded bg-gray-700 ${getEnhancementRank(item)!.color}`}>\n                            {getEnhancementRank(item)!.text}\n                          </span>\n                        )}\n                        <span className={`text-xs px-2 py-1 rounded ${\n                          item.rarity === 'legendary' ? 'bg-orange-600' :\n                          item.rarity === 'rare' ? 'bg-purple-600' :\n                          item.rarity === 'uncommon' ? 'bg-blue-600' :\n                          'bg-gray-600'\n                        }`}>\n                          {item.rarity}\n                        </span>\n                      </div>\n                      \n                      {/* Hover Stats Expansion */}\n                      {hoveredItem === index && (\n                        <div className=\"mt-2 p-2 bg-gray-700 rounded border border-gray-500\">\n                          <div className=\"text-sm text-gray-300 mb-1\">{item.description}</div>\n                          <div className=\"flex gap-3 text-sm\">\n                            {item.damage && <span className=\"text-red-400\">🔥 +{item.damage} Attack</span>}\n                            {item.defense && <span className=\"text-blue-400\">🛡️ +{item.defense} Defense</span>}\n                            {item.healthBonus && <span className=\"text-red-400\">❤️ +{item.healthBonus} Health</span>}\n                            {item.experienceBonus && <span className=\"text-green-400\">⭐ +{item.experienceBonus}% XP</span>}\n                            {item.healingPower && <span className=\"text-green-400\">❤️ Heals {item.healingPower}</span>}\n                          </div>\n                        </div>\n                      )}\n\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleUseOrEquip(item, index);\n                        }}\n                        className=\"text-xs text-green-400 hover:text-green-300 px-2 py-1 bg-green-900 bg-opacity-30 rounded\"\n                      >\n                        {item.type === 'consumable' ? 'Use' : 'Equip'}\n                      </button>\n                      <button\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          handleDeleteItem(index);\n                        }}\n                        className=\"text-red-400 hover:text-red-300\"\n                      >\n                        <Trash2 size={14} />\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Controls */}\n        <div className=\"mt-6 text-sm text-gray-400 text-center\">\n          Click items to select • Use action buttons • Select 2 items to merge • Press I to close\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Inventory;\n","size_bytes":22497},"ProgressBar.tsx":{"content":"interface ProgressBarProps {\n  current: number;\n  max: number;\n  color: string;\n  width?: string;\n  height?: string;\n}\n\nconst ProgressBar = ({ current, max, color, width = \"100px\", height = \"8px\" }: ProgressBarProps) => {\n  const percentage = Math.max(0, Math.min(100, (current / max) * 100));\n\n  return (\n    <div \n      className=\"bg-gray-700 rounded-full overflow-hidden border border-gray-600\"\n      style={{ width, height }}\n    >\n      <div\n        className={`h-full transition-all duration-300 ${color}`}\n        style={{ width: `${percentage}%` }}\n      />\n    </div>\n  );\n};\n\nexport default ProgressBar;\n","size_bytes":614},"accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":2001},"alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4419},"alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1598},"aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1140},"breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1902},"calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: cn(\n          \"relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md\",\n          props.mode === \"range\"\n            ? \"[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md\"\n            : \"[&:has([aria-selected])]:rounded-md\"\n        ),\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-8 w-8 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_start: \"day-range-start\",\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2935},"card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1828},"carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1012},"collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"combat.ts":{"content":"import { Player, Enemy } from './entities';\nimport { useAudio } from '../stores/useAudio';\n\nexport function calculateDamage(attacker: Player | Enemy, defender: Player | Enemy): number {\n  const baseDamage = attacker.attackPower;\n  const defense = defender.defense;\n  const damage = Math.max(1, baseDamage - defense);\n  \n  // Add some randomness (±25%)\n  const variance = 0.25;\n  const randomFactor = 1 + (Math.random() - 0.5) * variance * 2;\n  \n  return Math.floor(damage * randomFactor);\n}\n\nexport function performAttack(attacker: Player | Enemy, defender: Player | Enemy): {\n  damage: number;\n  killed: boolean;\n  message: string;\n} {\n  const damage = calculateDamage(attacker, defender);\n  defender.health = Math.max(0, defender.health - damage);\n  const killed = defender.health <= 0;\n  \n  // Play hit sound\n  const audio = useAudio.getState();\n  audio.playHit();\n  \n  const attackerName = 'level' in attacker ? 'You' : getEnemyName(attacker as Enemy);\n  const defenderName = 'level' in defender ? 'You' : getEnemyName(defender as Enemy);\n  \n  let message = `${attackerName} attack${attackerName === 'You' ? '' : 's'} ${defenderName} for ${damage} damage!`;\n  \n  if (killed) {\n    message += ` ${defenderName} ${defenderName === 'You' ? 'die' : 'dies'}!`;\n  }\n  \n  return { damage, killed, message };\n}\n\nexport function getEnemyName(enemy: Enemy): string {\n  return enemy.type.charAt(0).toUpperCase() + enemy.type.slice(1);\n}\n\nexport function gainExperience(player: Player, experience: number): {\n  newPlayer: Player;\n  leveledUp: boolean;\n  message: string;\n} {\n  let newPlayer = { ...player };\n  newPlayer.experience += experience;\n  let leveledUp = false;\n  let message = `You gain ${experience} experience!`;\n  \n  // Check for level up\n  while (newPlayer.experience >= newPlayer.experienceToNext) {\n    newPlayer.experience -= newPlayer.experienceToNext;\n    newPlayer.level++;\n    leveledUp = true;\n    \n    // Increase stats on level up\n    const healthIncrease = Math.floor(Math.random() * 8) + 5; // 5-12 health\n    const manaIncrease = Math.floor(Math.random() * 5) + 3;   // 3-7 mana\n    const attackIncrease = Math.floor(Math.random() * 2) + 1; // 1-2 attack\n    const defenseIncrease = Math.floor(Math.random() * 2) + 1; // 1-2 defense\n    \n    newPlayer.maxHealth += healthIncrease;\n    newPlayer.health = newPlayer.maxHealth; // Full heal on level up\n    newPlayer.maxMana += manaIncrease;\n    newPlayer.mana = newPlayer.maxMana; // Full mana restore on level up\n    newPlayer.attackPower += attackIncrease;\n    newPlayer.defense += defenseIncrease;\n    \n    // Increase experience needed for next level\n    newPlayer.experienceToNext = Math.floor(newPlayer.experienceToNext * 1.3);\n    \n    message += ` Level up! You are now level ${newPlayer.level}!`;\n  }\n  \n  return { newPlayer, leveledUp, message };\n}\n","size_bytes":2827},"command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4873},"context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7224},"dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogTrigger,\n  DialogClose,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3849},"drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7480},"entities.ts":{"content":"export interface Position {\n  x: number;\n  y: number;\n}\n\nexport interface Tile {\n  type: 'wall' | 'floor' | 'stairs';\n  x: number;\n  y: number;\n  symbol: string;\n  color: string;\n}\n\nexport interface Item {\n  id: string;\n  name: string;\n  description: string;\n  type: 'weapon' | 'armor' | 'aura' | 'consumable';\n  symbol: string;\n  color: string;\n  rarity: 'common' | 'uncommon' | 'rare' | 'legendary';\n  \n  // Weapon properties\n  damage?: number;\n  \n  // Armor properties  \n  defense?: number;\n  \n  // Consumable properties\n  healingPower?: number;\n  manaPower?: number;\n  \n  // Aura properties\n  healthBonus?: number;\n  manaBonus?: number;\n  experienceBonus?: number;\n}\n\nexport interface Entity {\n  id: string;\n  x: number;\n  y: number;\n  symbol: string;\n  color: string;\n  health: number;\n  maxHealth: number;\n  attackPower: number;\n  defense: number;\n  speed: number;\n  lastMoveTime: number;\n}\n\nexport interface Player extends Entity {\n  level: number;\n  experience: number;\n  isAttacking?: boolean;\n  attackTarget?: Position;\n  experienceToNext: number;\n  mana: number;\n  maxMana: number;\n  inventory: Item[];\n  inventorySize: number;\n  weapon: Item | null;\n  armor: Item | null;\n  aura: Item | null;\n}\n\nexport interface Enemy extends Entity {\n  type: 'goblin' | 'orc' | 'skeleton' | 'dragon';\n  ai: 'passive' | 'aggressive' | 'guard';\n  experienceValue: number;\n  lootTable: Item[];\n}\n\nexport interface Room {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  centerX: number;\n  centerY: number;\n  connected: boolean;\n}\n\nexport interface Dungeon {\n  width: number;\n  height: number;\n  tiles: Tile[];\n  rooms: Room[];\n  stairs: Position;\n  items: Array<Item & Position>;\n}\n\nexport interface Message {\n  text: string;\n  type: 'info' | 'damage' | 'success';\n  timestamp: number;\n}\n\nexport type GamePhase = 'ready' | 'playing' | 'gameOver';\n\nexport interface GameState {\n  gamePhase: GamePhase;\n  level: number;\n  score: number;\n  player: Player;\n  enemies: Enemy[];\n  dungeon: Dungeon;\n  visibleTiles: Position[];\n  exploredTiles: Position[];\n  messages: Message[];\n  showInventory: boolean;\n}\n","size_bytes":2109},"form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-[0.8rem] text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-[0.8rem] font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4132},"hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1198},"index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n    width: 100vw;\n    height: 100vh;\n  }\n}\n\n#root {\n  width: 100%;\n  height: 100%;\n  position: fixed;\n}\n\ncanvas {\n  width: 100% !important;\n  height: 100% !important;\n  touch-action: none;\n}","size_bytes":427},"index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1871},"input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Minus } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-9 w-9 items-center justify-center border-y border-r border-input text-sm shadow-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-1 ring-ring\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Minus />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2143},"input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":768},"interface.tsx":{"content":"import { useEffect } from \"react\";\nimport { useGame } from \"@/lib/stores/useGame\";\nimport { useAudio } from \"@/lib/stores/useAudio\";\nimport { Button } from \"./button\";\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"./card\";\nimport { VolumeX, Volume2, RotateCw, Trophy } from \"lucide-react\";\n\nexport function Interface() {\n  const restart = useGame((state) => state.restart);\n  const phase = useGame((state) => state.phase);\n  const { isMuted, toggleMute } = useAudio();\n\n  // Handle clicks on the interface in the ready phase to start the game\n  useEffect(() => {\n    if (phase === \"ready\") {\n      const handleClick = () => {\n        const activeElement = document.activeElement;\n        if (activeElement && 'blur' in activeElement) {\n          (activeElement as HTMLElement).blur();\n        }\n        const event = new KeyboardEvent(\"keydown\", { code: \"Space\" });\n        window.dispatchEvent(event);\n      };\n\n      window.addEventListener(\"click\", handleClick);\n      return () => window.removeEventListener(\"click\", handleClick);\n    }\n  }, [phase]);\n\n  return (\n    <>\n      {/* Top-right corner UI controls */}\n      <div className=\"fixed top-4 right-4 flex gap-2 z-10\">\n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={toggleMute}\n          title={isMuted ? \"Unmute\" : \"Mute\"}\n        >\n          {isMuted ? <VolumeX size={18} /> : <Volume2 size={18} />}\n        </Button>\n        \n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={restart}\n          title=\"Restart Game\"\n        >\n          <RotateCw size={18} />\n        </Button>\n      </div>\n      \n      {/* Game completion overlay */}\n      {phase === \"ended\" && (\n        <div className=\"fixed inset-0 flex items-center justify-center z-20 bg-black/30\">\n          <Card className=\"w-full max-w-md mx-4 shadow-lg\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-center gap-2\">\n                <Trophy className=\"text-yellow-500\" />\n                Level Complete!\n              </CardTitle>\n            </CardHeader>\n            \n            <CardContent>\n              <p className=\"text-center text-muted-foreground\">\n                Congratulations! You successfully navigated the course.\n              </p>\n            </CardContent>\n            \n            <CardFooter className=\"flex justify-center\">\n              <Button onClick={restart} className=\"w-full\">\n                Play Again\n              </Button>\n            </CardFooter>\n          </Card>\n        </div>\n      )}\n      \n      {/* Instructions panel */}\n      <div className=\"fixed bottom-4 left-4 z-10\">\n        <Card className=\"w-auto max-w-xs bg-background/80 backdrop-blur-sm\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-medium mb-2\">Controls:</h3>\n            <ul className=\"text-sm space-y-1 text-muted-foreground\">\n              <li>WASD or Arrow Keys: Move the ball</li>\n              <li>Space: Jump</li>\n              <li>R: Restart game</li>\n              <li>M: Toggle sound</li>\n            </ul>\n          </CardContent>\n        </Card>\n      </div>\n    </>\n  );\n}\n","size_bytes":3180},"items.ts":{"content":"import { Item } from './entities';\n\nexport function generateRandomItem(): Item {\n  const itemTypes = ['weapon', 'armor', 'aura', 'consumable'] as const;\n  const rarities = ['common', 'uncommon', 'rare', 'legendary'] as const;\n  \n  const type = itemTypes[Math.floor(Math.random() * itemTypes.length)];\n  const rarity = getRandomRarity();\n  \n  const rarityMultiplier = {\n    common: 1,\n    uncommon: 1.5,\n    rare: 2,\n    legendary: 3\n  }[rarity];\n\n  if (type === 'weapon') {\n    return generateWeapon(rarity, rarityMultiplier);\n  } else if (type === 'armor') {\n    return generateArmor(rarity, rarityMultiplier);\n  } else if (type === 'aura') {\n    return generateAura(rarity, rarityMultiplier);\n  } else {\n    return generateConsumable(rarity, rarityMultiplier);\n  }\n}\n\nfunction getRandomRarity(): 'common' | 'uncommon' | 'rare' | 'legendary' {\n  const roll = Math.random();\n  if (roll < 0.6) return 'common';\n  if (roll < 0.85) return 'uncommon';\n  if (roll < 0.97) return 'rare';\n  return 'legendary';\n}\n\nfunction generateWeapon(rarity: string, multiplier: number): Item {\n  const weapons = [\n    { name: 'Rusty Sword', symbol: '/', baseDamage: 3, description: 'An old, weathered blade' },\n    { name: 'Iron Dagger', symbol: '-', baseDamage: 2, description: 'Quick and precise' },\n    { name: 'War Hammer', symbol: 'T', baseDamage: 5, description: 'Heavy and devastating' },\n    { name: 'Magic Staff', symbol: '|', baseDamage: 4, description: 'Crackling with energy' },\n    { name: 'Bow', symbol: ')', baseDamage: 3, description: 'Silent and deadly' },\n    { name: 'Battle Axe', symbol: 'P', baseDamage: 6, description: 'Cleaves through armor' }\n  ];\n\n  const base = weapons[Math.floor(Math.random() * weapons.length)];\n  const damage = Math.floor(base.baseDamage * multiplier);\n\n  return {\n    id: Math.random().toString(36),\n    name: `${getRarityPrefix(rarity)}${base.name}`,\n    description: base.description,\n    type: 'weapon',\n    symbol: base.symbol,\n    color: getRarityColor(rarity),\n    rarity: rarity as any,\n    damage\n  };\n}\n\nfunction generateArmor(rarity: string, multiplier: number): Item {\n  const armors = [\n    { name: 'Leather Armor', symbol: '[', baseDefense: 2, description: 'Light and flexible' },\n    { name: 'Chain Mail', symbol: '#', baseDefense: 3, description: 'Interlocked protection' },\n    { name: 'Plate Armor', symbol: 'H', baseDefense: 5, description: 'Heavy metal protection' },\n    { name: 'Robe', symbol: '&', baseDefense: 1, description: 'Mystical garment' },\n    { name: 'Scale Mail', symbol: 'S', baseDefense: 4, description: 'Dragon scale protection' }\n  ];\n\n  const base = armors[Math.floor(Math.random() * armors.length)];\n  const defense = Math.floor(base.baseDefense * multiplier);\n\n  return {\n    id: Math.random().toString(36),\n    name: `${getRarityPrefix(rarity)}${base.name}`,\n    description: base.description,\n    type: 'armor',\n    symbol: base.symbol,\n    color: getRarityColor(rarity),\n    rarity: rarity as any,\n    defense\n  };\n}\n\nfunction generateConsumable(rarity: string, multiplier: number): Item {\n  const consumables = [\n    { name: 'Health Potion', symbol: '!', baseHealing: 15, description: 'Restores health' },\n    { name: 'Mana Potion', symbol: '?', baseMana: 10, description: 'Restores mana' },\n    { name: 'Elixir', symbol: '%', baseHealing: 25, baseMana: 15, description: 'Restores health and mana' },\n    { name: 'Bread', symbol: '*', baseHealing: 8, description: 'Simple sustenance' }\n  ];\n\n  const base = consumables[Math.floor(Math.random() * consumables.length)];\n  const healingPower = base.baseHealing ? Math.floor(base.baseHealing * multiplier) : undefined;\n  const manaPower = base.baseMana ? Math.floor(base.baseMana * multiplier) : undefined;\n\n  return {\n    id: Math.random().toString(36),\n    name: `${getRarityPrefix(rarity)}${base.name}`,\n    description: base.description,\n    type: 'consumable',\n    symbol: base.symbol,\n    color: getRarityColor(rarity),\n    rarity: rarity as any,\n    healingPower,\n    manaPower\n  };\n}\n\nfunction getRarityPrefix(rarity: string): string {\n  switch (rarity) {\n    case 'uncommon': return 'Fine ';\n    case 'rare': return 'Superior ';\n    case 'legendary': return 'Legendary ';\n    default: return '';\n  }\n}\n\nfunction generateAura(rarity: string, multiplier: number): Item {\n  const auras = [\n    { name: 'Healing Aura', symbol: '◊', baseHealth: 20, baseMana: 0, baseExp: 0, description: 'Increases maximum health' },\n    { name: 'Mana Aura', symbol: '◊', baseHealth: 0, baseMana: 15, baseExp: 0, description: 'Increases maximum mana' },\n    { name: 'Vitality Aura', symbol: '◊', baseHealth: 15, baseMana: 10, baseExp: 0, description: 'Increases health and mana' },\n    { name: 'Experience Aura', symbol: '◊', baseHealth: 5, baseMana: 5, baseExp: 25, description: 'Boosts experience gain' },\n    { name: 'Radiant Aura', symbol: '◊', baseHealth: 25, baseMana: 20, baseExp: 10, description: 'Powerful magical enhancement' }\n  ];\n\n  const base = auras[Math.floor(Math.random() * auras.length)];\n  const healthBonus = base.baseHealth > 0 ? Math.floor(base.baseHealth * multiplier) : undefined;\n  const manaBonus = base.baseMana > 0 ? Math.floor(base.baseMana * multiplier) : undefined;\n  const experienceBonus = base.baseExp > 0 ? Math.floor(base.baseExp * multiplier) : undefined;\n\n  return {\n    id: Math.random().toString(36),\n    name: `${getRarityPrefix(rarity)}${base.name}`,\n    description: base.description,\n    type: 'aura',\n    symbol: base.symbol,\n    color: getRarityColor(rarity),\n    rarity: rarity as any,\n    healthBonus,\n    manaBonus,\n    experienceBonus\n  };\n}\n\nfunction getRarityColor(rarity: string): string {\n  switch (rarity) {\n    case 'uncommon': return '#5555ff';\n    case 'rare': return '#aa55ff';\n    case 'legendary': return '#ff8800';\n    default: return '#ffffff';\n  }\n}\n","size_bytes":5831},"label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-9 items-center space-x-1 rounded-md border bg-background p-1 shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8522},"navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5124},"not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationLink,\n  PaginationItem,\n  PaginationPrevious,\n  PaginationNext,\n  PaginationEllipsis,\n}\n","size_bytes":2751},"pathfinding.ts":{"content":"import { Position, Tile } from './entities';\n\nexport interface PathNode {\n  x: number;\n  y: number;\n  g: number; // Cost from start\n  h: number; // Heuristic cost to end\n  f: number; // Total cost\n  parent: PathNode | null;\n}\n\nexport function findPath(\n  start: Position,\n  end: Position,\n  tiles: Tile[],\n  width: number,\n  height: number,\n  maxDistance: number = 15\n): Position[] {\n  // Simple A* pathfinding implementation\n  const openList: PathNode[] = [];\n  const closedList: Set<string> = new Set();\n  \n  const startNode: PathNode = {\n    x: start.x,\n    y: start.y,\n    g: 0,\n    h: heuristic(start, end),\n    f: 0,\n    parent: null\n  };\n  startNode.f = startNode.g + startNode.h;\n  \n  openList.push(startNode);\n  \n  while (openList.length > 0) {\n    // Find node with lowest f score\n    let currentIndex = 0;\n    for (let i = 1; i < openList.length; i++) {\n      if (openList[i].f < openList[currentIndex].f) {\n        currentIndex = i;\n      }\n    }\n    \n    const currentNode = openList[currentIndex];\n    openList.splice(currentIndex, 1);\n    closedList.add(`${currentNode.x},${currentNode.y}`);\n    \n    // Check if we reached the target\n    if (currentNode.x === end.x && currentNode.y === end.y) {\n      const path: Position[] = [];\n      let node: PathNode | null = currentNode;\n      while (node) {\n        path.unshift({ x: node.x, y: node.y });\n        node = node.parent;\n      }\n      return path.slice(1); // Remove the starting position\n    }\n    \n    // Check neighbors\n    const neighbors = [\n      { x: currentNode.x + 1, y: currentNode.y },\n      { x: currentNode.x - 1, y: currentNode.y },\n      { x: currentNode.x, y: currentNode.y + 1 },\n      { x: currentNode.x, y: currentNode.y - 1 }\n    ];\n    \n    for (const neighbor of neighbors) {\n      const key = `${neighbor.x},${neighbor.y}`;\n      \n      // Check bounds\n      if (neighbor.x < 0 || neighbor.x >= width || neighbor.y < 0 || neighbor.y >= height) {\n        continue;\n      }\n      \n      // Check if already processed\n      if (closedList.has(key)) {\n        continue;\n      }\n      \n      // Check if walkable\n      const tileIndex = neighbor.y * width + neighbor.x;\n      const tile = tiles[tileIndex];\n      if (tile.type === 'wall') {\n        continue;\n      }\n      \n      // Check distance limit\n      if (heuristic(start, neighbor) > maxDistance) {\n        continue;\n      }\n      \n      const g = currentNode.g + 1;\n      const h = heuristic(neighbor, end);\n      const f = g + h;\n      \n      // Check if this path to neighbor is better\n      const existingNodeIndex = openList.findIndex(node => node.x === neighbor.x && node.y === neighbor.y);\n      if (existingNodeIndex >= 0) {\n        if (g < openList[existingNodeIndex].g) {\n          openList[existingNodeIndex].g = g;\n          openList[existingNodeIndex].f = f;\n          openList[existingNodeIndex].parent = currentNode;\n        }\n      } else {\n        const neighborNode: PathNode = {\n          x: neighbor.x,\n          y: neighbor.y,\n          g,\n          h,\n          f,\n          parent: currentNode\n        };\n        openList.push(neighborNode);\n      }\n    }\n  }\n  \n  return []; // No path found\n}\n\nfunction heuristic(a: Position, b: Position): number {\n  return Math.abs(a.x - b.x) + Math.abs(a.y - b.y);\n}\n\nexport function getSimpleDirection(from: Position, to: Position): Position {\n  const dx = to.x - from.x;\n  const dy = to.y - from.y;\n  \n  // Normalize to -1, 0, or 1\n  const moveX = dx === 0 ? 0 : dx > 0 ? 1 : -1;\n  const moveY = dy === 0 ? 0 : dy > 0 ? 1 : -1;\n  \n  // Prefer moving in the direction of the larger difference\n  if (Math.abs(dx) > Math.abs(dy)) {\n    return { x: moveX, y: 0 };\n  } else {\n    return { x: 0, y: moveY };\n  }\n}\n","size_bytes":3718},"popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverAnchor = PopoverPrimitive.Anchor\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n","size_bytes":1292},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-2 w-full overflow-hidden rounded-full bg-primary/20\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":792},"queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary shadow focus:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-3.5 w-3.5 fill-primary\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1410},"renderer.ts":{"content":"import { GameState, Entity, Position } from './entities';\n\nexport class GameRenderer {\n  private ctx: CanvasRenderingContext2D;\n  private tileSize: number = 16;\n  private viewportWidth: number = 60;\n  private viewportHeight: number = 35;\n\n  constructor(context: CanvasRenderingContext2D) {\n    this.ctx = context;\n  }\n\n  render(gameState: GameState): void {\n    if (!gameState || gameState.gamePhase !== 'playing') return;\n\n    const canvas = this.ctx.canvas;\n    this.ctx.clearRect(0, 0, canvas.width, canvas.height);\n    \n    // Calculate viewport offset to center on player\n    const player = gameState.player;\n    const offsetX = Math.floor(this.viewportWidth / 2) - player.x;\n    const offsetY = Math.floor(this.viewportHeight / 2) - player.y;\n    \n    // Render tiles\n    this.renderTiles(gameState, offsetX, offsetY);\n    \n    // Render items\n    this.renderItems(gameState, offsetX, offsetY);\n    \n    // Render enemies\n    this.renderEnemies(gameState, offsetX, offsetY);\n    \n    // Render player\n    this.renderPlayer(gameState, offsetX, offsetY);\n  }\n\n  private renderTiles(gameState: GameState, offsetX: number, offsetY: number): void {\n    const { dungeon, visibleTiles, exploredTiles } = gameState;\n    \n    for (let screenY = 0; screenY < this.viewportHeight; screenY++) {\n      for (let screenX = 0; screenX < this.viewportWidth; screenX++) {\n        const worldX = screenX - offsetX;\n        const worldY = screenY - offsetY;\n        \n        // Check bounds\n        if (worldX < 0 || worldX >= dungeon.width || worldY < 0 || worldY >= dungeon.height) {\n          this.renderTile(screenX, screenY, { symbol: ' ', color: '#000000' });\n          continue;\n        }\n        \n        const tileIndex = worldY * dungeon.width + worldX;\n        const tile = dungeon.tiles[tileIndex];\n        \n        // Check visibility\n        const isVisible = visibleTiles.some(pos => pos.x === worldX && pos.y === worldY);\n        const isExplored = exploredTiles.some(pos => pos.x === worldX && pos.y === worldY);\n        \n        if (isVisible) {\n          this.renderTile(screenX, screenY, { symbol: tile.symbol, color: tile.color });\n        } else if (isExplored) {\n          // Render explored tiles in darker color\n          this.renderTile(screenX, screenY, { symbol: tile.symbol, color: this.darkenColor(tile.color) });\n        } else {\n          // Unexplored tile\n          this.renderTile(screenX, screenY, { symbol: ' ', color: '#000000' });\n        }\n      }\n    }\n  }\n\n  private renderItems(gameState: GameState, offsetX: number, offsetY: number): void {\n    const { dungeon, visibleTiles } = gameState;\n    \n    for (const item of dungeon.items) {\n      const screenX = item.x + offsetX;\n      const screenY = item.y + offsetY;\n      \n      // Check if on screen and visible\n      if (screenX >= 0 && screenX < this.viewportWidth && \n          screenY >= 0 && screenY < this.viewportHeight &&\n          visibleTiles.some(pos => pos.x === item.x && pos.y === item.y)) {\n        this.renderEntity(screenX, screenY, { symbol: item.symbol, color: item.color });\n      }\n    }\n  }\n\n  private renderEnemies(gameState: GameState, offsetX: number, offsetY: number): void {\n    const { enemies, visibleTiles } = gameState;\n    \n    for (const enemy of enemies) {\n      const screenX = enemy.x + offsetX;\n      const screenY = enemy.y + offsetY;\n      \n      // Check if on screen and visible\n      if (screenX >= 0 && screenX < this.viewportWidth && \n          screenY >= 0 && screenY < this.viewportHeight &&\n          visibleTiles.some(pos => pos.x === enemy.x && pos.y === enemy.y)) {\n        this.renderEntity(screenX, screenY, { symbol: enemy.symbol, color: enemy.color });\n      }\n    }\n  }\n\n  private renderPlayer(gameState: GameState, offsetX: number, offsetY: number): void {\n    const player = gameState.player;\n    const screenX = player.x + offsetX;\n    const screenY = player.y + offsetY;\n    \n    if (screenX >= 0 && screenX < this.viewportWidth && \n        screenY >= 0 && screenY < this.viewportHeight) {\n      \n      // Draw aura effect first if player has aura equipped\n      if (player.aura) {\n        this.renderAuraEffect(screenX, screenY, player.aura);\n      }\n      \n      // Draw attack animation if attacking\n      if (player.isAttacking && player.attackTarget) {\n        this.renderAttackEffect(screenX, screenY, player.attackTarget, offsetX, offsetY);\n      }\n      \n      // Then draw the player (with attack animation if attacking)\n      const playerColor = player.isAttacking ? '#ff0000' : player.color;\n      this.renderEntity(screenX, screenY, { symbol: player.symbol, color: playerColor });\n    }\n  }\n  \n  private renderAttackEffect(playerScreenX: number, playerScreenY: number, target: Position, offsetX: number, offsetY: number): void {\n    const targetScreenX = target.x + offsetX;\n    const targetScreenY = target.y + offsetY;\n    \n    // Only render if target is on screen\n    if (targetScreenX >= 0 && targetScreenX < this.viewportWidth && \n        targetScreenY >= 0 && targetScreenY < this.viewportHeight) {\n      \n      const time = Date.now() / 1000;\n      const playerPixelX = playerScreenX * this.tileSize + this.tileSize / 2;\n      const playerPixelY = playerScreenY * this.tileSize + this.tileSize / 2;\n      const targetPixelX = targetScreenX * this.tileSize + this.tileSize / 2;\n      const targetPixelY = targetScreenY * this.tileSize + this.tileSize / 2;\n      \n      this.ctx.save();\n      \n      // Attack slash effect\n      this.ctx.strokeStyle = '#ff6600';\n      this.ctx.lineWidth = 4;\n      this.ctx.globalAlpha = 0.8;\n      \n      this.ctx.beginPath();\n      this.ctx.moveTo(playerPixelX, playerPixelY);\n      this.ctx.lineTo(targetPixelX, targetPixelY);\n      this.ctx.stroke();\n      \n      // Impact sparks at target\n      for (let i = 0; i < 6; i++) {\n        const angle = (i * Math.PI) / 3;\n        const sparkX = targetPixelX + Math.cos(angle) * 8;\n        const sparkY = targetPixelY + Math.sin(angle) * 8;\n        \n        this.ctx.fillStyle = '#ffaa00';\n        this.ctx.font = `${this.tileSize * 0.5}px monospace`;\n        this.ctx.textAlign = 'center';\n        this.ctx.textBaseline = 'middle';\n        this.ctx.fillText('💥', sparkX, sparkY);\n      }\n      \n      this.ctx.restore();\n    }\n  }\n  \n  private renderAuraEffect(screenX: number, screenY: number, aura: any): void {\n    const time = Date.now() / 1000;\n    const pixelX = screenX * this.tileSize + this.tileSize / 2;\n    const pixelY = screenY * this.tileSize + this.tileSize / 2;\n    \n    // Get rarity-specific effects\n    const isLegendary = aura.rarity === 'legendary';\n    const isRare = aura.rarity === 'rare';\n    const isUncommon = aura.rarity === 'uncommon';\n    \n    // Determine colors and effects based on rarity\n    let auraColor = '#aa55ff';\n    let sparkleEmojis = ['✨'];\n    let effectIntensity = 1;\n    \n    if (isLegendary) {\n      auraColor = '#ff6b00';\n      sparkleEmojis = ['💫', '🌟', '✨', '⭐'];\n      effectIntensity = 2;\n    } else if (isRare) {\n      auraColor = '#aa55ff';\n      sparkleEmojis = ['✨', '⭐', '💫'];\n      effectIntensity = 1.5;\n    } else if (isUncommon) {\n      auraColor = '#5599ff';\n      sparkleEmojis = ['✨', '⭐'];\n      effectIntensity = 1.2;\n    }\n    \n    this.ctx.save();\n    \n    // Legendary gets triple ring system\n    const ringCount = isLegendary ? 4 : isRare ? 3 : 2;\n    \n    for (let ring = 0; ring < ringCount; ring++) {\n      const baseRadius = 8 + ring * 6;\n      const radius = baseRadius + Math.sin(time * (2 + ring) * effectIntensity) * (4 * effectIntensity);\n      const alpha = (0.4 - ring * 0.1) * effectIntensity + Math.sin(time * (3 + ring)) * 0.1;\n      \n      this.ctx.globalAlpha = alpha;\n      this.ctx.strokeStyle = auraColor;\n      this.ctx.lineWidth = isLegendary ? 3 : 2;\n      this.ctx.beginPath();\n      this.ctx.arc(pixelX, pixelY, radius, 0, Math.PI * 2);\n      this.ctx.stroke();\n    }\n    \n    // Rotating energy particles\n    const particleCount = isLegendary ? 12 : isRare ? 8 : 6;\n    this.ctx.globalAlpha = 0.9;\n    \n    for (let i = 0; i < particleCount; i++) {\n      const angle = (time * 1.5 * effectIntensity + i * (Math.PI * 2) / particleCount);\n      const particleRadius = 18 + Math.sin(time * 4 + i) * 6;\n      const particleX = pixelX + Math.cos(angle) * particleRadius;\n      const particleY = pixelY + Math.sin(angle) * particleRadius;\n      \n      // Use rarity-specific emojis\n      const emojiIndex = isLegendary ? i % sparkleEmojis.length : Math.floor(i / 2) % sparkleEmojis.length;\n      this.ctx.fillStyle = auraColor;\n      this.ctx.font = `${this.tileSize * 0.6}px monospace`;\n      this.ctx.textAlign = 'center';\n      this.ctx.textBaseline = 'middle';\n      this.ctx.fillText(sparkleEmojis[emojiIndex], particleX, particleY);\n    }\n    \n    // Central power core\n    const coreRadius = 6 + Math.sin(time * 3) * 2;\n    const coreAlpha = 0.2 + Math.sin(time * 4) * 0.1;\n    this.ctx.globalAlpha = coreAlpha * effectIntensity;\n    this.ctx.fillStyle = auraColor;\n    this.ctx.beginPath();\n    this.ctx.arc(pixelX, pixelY, coreRadius, 0, Math.PI * 2);\n    this.ctx.fill();\n    \n    // Legendary gets additional swirling energy streams\n    if (isLegendary) {\n      this.ctx.globalAlpha = 0.6;\n      for (let stream = 0; stream < 3; stream++) {\n        const streamAngle = time * 2 + stream * Math.PI * 2 / 3;\n        const streamRadius = 12 + Math.sin(time * 3 + stream) * 4;\n        const streamX = pixelX + Math.cos(streamAngle) * streamRadius;\n        const streamY = pixelY + Math.sin(streamAngle) * streamRadius;\n        \n        this.ctx.strokeStyle = auraColor;\n        this.ctx.lineWidth = 2;\n        this.ctx.beginPath();\n        this.ctx.arc(streamX, streamY, 3, 0, Math.PI * 2);\n        this.ctx.stroke();\n      }\n    }\n    \n    this.ctx.restore();\n  }\n\n  private renderTile(x: number, y: number, tile: { symbol: string; color: string }): void {\n    const pixelX = x * this.tileSize;\n    const pixelY = y * this.tileSize;\n    \n    this.ctx.fillStyle = tile.color;\n    this.ctx.font = `${this.tileSize}px monospace`;\n    this.ctx.textAlign = 'center';\n    this.ctx.textBaseline = 'middle';\n    this.ctx.fillText(\n      tile.symbol, \n      pixelX + this.tileSize / 2, \n      pixelY + this.tileSize / 2\n    );\n  }\n\n  private renderEntity(x: number, y: number, entity: { symbol: string; color: string }): void {\n    const pixelX = x * this.tileSize;\n    const pixelY = y * this.tileSize;\n    \n    this.ctx.fillStyle = entity.color;\n    this.ctx.font = `bold ${this.tileSize}px monospace`;\n    this.ctx.textAlign = 'center';\n    this.ctx.textBaseline = 'middle';\n    this.ctx.fillText(\n      entity.symbol, \n      pixelX + this.tileSize / 2, \n      pixelY + this.tileSize / 2\n    );\n  }\n\n  private darkenColor(color: string): string {\n    // Simple color darkening - reduce each component by 50%\n    if (color.startsWith('#')) {\n      const hex = color.slice(1);\n      const r = Math.floor(parseInt(hex.substr(0, 2), 16) * 0.5);\n      const g = Math.floor(parseInt(hex.substr(2, 2), 16) * 0.5);\n      const b = Math.floor(parseInt(hex.substr(4, 2), 16) * 0.5);\n      return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\n    }\n    return color;\n  }\n}\n","size_bytes":11281},"replit.md":{"content":"# Overview\n\nThis is a browser-based roguelike game built with a React frontend and Express backend. The game features dungeon exploration, turn-based combat, inventory management, and item collection in a classic ASCII-style presentation. Players navigate through procedurally generated dungeons, fight enemies, collect items, and progress through levels.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript for type safety and component-based architecture\n- **Styling**: Tailwind CSS for utility-first styling with custom design system variables\n- **State Management**: Zustand stores for game state, audio management, and roguelike mechanics\n- **Canvas Rendering**: Custom 2D canvas renderer for ASCII-style game graphics with pixel-perfect rendering\n- **UI Components**: Radix UI primitives with custom styling for consistent interface elements\n\n## Backend Architecture  \n- **Framework**: Express.js with TypeScript for RESTful API endpoints\n- **Module System**: ES modules for modern JavaScript import/export syntax\n- **Development**: Vite for hot module replacement and fast development builds\n- **Database Schema**: Drizzle ORM with PostgreSQL for data persistence and type-safe queries\n- **Storage Layer**: Abstracted storage interface with in-memory implementation for development\n\n## Game Engine Design\n- **Core Engine**: Custom GameEngine class managing game state, turn processing, and game logic\n- **Dungeon Generation**: Procedural dungeon creation with room-based layout and corridor connections\n- **Entity System**: Player, enemies, and items as separate entity types with shared interfaces\n- **Combat System**: Turn-based combat with damage calculation, experience gain, and equipment effects\n- **Pathfinding**: A* algorithm for enemy AI movement and navigation\n- **Inventory Management**: Item collection, equipment, and consumable usage systems\n\n## Audio System\n- **Audio Manager**: Zustand store for background music, sound effects, and mute controls\n- **Sound Assets**: Preloaded audio files for combat, success, and ambient background music\n- **Volume Control**: Global mute/unmute functionality with persistent state\n\n## Data Storage Solutions\n- **Development**: In-memory storage for rapid iteration and testing\n- **Production**: PostgreSQL database with Drizzle ORM for type-safe schema management\n- **Schema Design**: User management with username/password authentication structure\n\n# External Dependencies\n\n## Core Framework Dependencies\n- **@neondatabase/serverless**: Serverless PostgreSQL database connection for cloud deployment\n- **drizzle-orm**: Type-safe ORM for database operations and schema management\n- **express**: Node.js web framework for API server and static file serving\n- **vite**: Frontend build tool with hot reload and optimized production builds\n\n## UI and Styling\n- **@radix-ui/***: Comprehensive set of accessible UI primitives for consistent interface components\n- **tailwindcss**: Utility-first CSS framework for responsive design and theming\n- **@fontsource/inter**: Self-hosted Inter font for consistent typography\n\n## Game Development\n- **@react-three/fiber**: React renderer for Three.js (prepared for potential 3D features)\n- **@react-three/drei**: Helper components for Three.js integration\n- **@tanstack/react-query**: Data fetching and caching for API interactions\n\n## Development Tools\n- **typescript**: Static type checking for enhanced code reliability\n- **tsx**: TypeScript execution for Node.js development server\n- **esbuild**: Fast JavaScript bundler for production builds","size_bytes":3654},"resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"schema.ts":{"content":"import { pgTable, text, serial, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":533},"scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5639},"separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n      {children}\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4280},"sidebar.tsx":{"content":"import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { VariantProps, cva } from \"class-variance-authority\";\nimport { PanelLeft } from \"lucide-react\";\n\nimport { useIsMobile } from \"@/hooks/use-is-mobile\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\";\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;\nconst SIDEBAR_WIDTH = \"16rem\";\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\";\nconst SIDEBAR_WIDTH_ICON = \"3rem\";\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\";\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\";\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  openMobile: boolean;\n  setOpenMobile: (open: boolean) => void;\n  isMobile: boolean;\n  toggleSidebar: () => void;\n};\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null);\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext);\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\");\n  }\n\n  return context;\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean;\n    open?: boolean;\n    onOpenChange?: (open: boolean) => void;\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const isMobile = useIsMobile();\n    const [openMobile, setOpenMobile] = React.useState(false);\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen);\n    const open = openProp ?? _open;\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value;\n        if (setOpenProp) {\n          setOpenProp(openState);\n        } else {\n          _setOpen(openState);\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;\n      },\n      [setOpenProp, open],\n    );\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open);\n    }, [isMobile, setOpen, setOpenMobile]);\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault();\n          toggleSidebar();\n        }\n      };\n\n      window.addEventListener(\"keydown\", handleKeyDown);\n      return () => window.removeEventListener(\"keydown\", handleKeyDown);\n    }, [toggleSidebar]);\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\";\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      ],\n    );\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className,\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    );\n  },\n);\nSidebarProvider.displayName = \"SidebarProvider\";\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\";\n    variant?: \"sidebar\" | \"floating\" | \"inset\";\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\";\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar();\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className,\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      );\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      );\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\",\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className,\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    );\n  },\n);\nSidebar.displayName = \"Sidebar\";\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event);\n        toggleSidebar();\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  );\n});\nSidebarTrigger.displayName = \"SidebarTrigger\";\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarRail.displayName = \"SidebarRail\";\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInset.displayName = \"SidebarInset\";\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInput.displayName = \"SidebarInput\";\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarHeader.displayName = \"SidebarHeader\";\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarFooter.displayName = \"SidebarFooter\";\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  );\n});\nSidebarSeparator.displayName = \"SidebarSeparator\";\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarContent.displayName = \"SidebarContent\";\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarGroup.displayName = \"SidebarGroup\";\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\";\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupAction.displayName = \"SidebarGroupAction\";\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n));\nSidebarGroupContent.displayName = \"SidebarGroupContent\";\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n));\nSidebarMenu.displayName = \"SidebarMenu\";\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n));\nSidebarMenuItem.displayName = \"SidebarMenuItem\";\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    isActive?: boolean;\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>;\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref,\n  ) => {\n    const Comp = asChild ? Slot : \"button\";\n    const { isMobile, state } = useSidebar();\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    );\n\n    if (!tooltip) {\n      return button;\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      };\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    );\n  },\n);\nSidebarMenuButton.displayName = \"SidebarMenuButton\";\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    showOnHover?: boolean;\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuAction.displayName = \"SidebarMenuAction\";\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className,\n    )}\n    {...props}\n  />\n));\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\";\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean;\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`;\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  );\n});\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\";\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className,\n    )}\n    {...props}\n  />\n));\nSidebarMenuSub.displayName = \"SidebarMenuSub\";\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />);\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\";\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean;\n    size?: \"sm\" | \"md\";\n    isActive?: boolean;\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\";\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n};\n","size_bytes":23790},"skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-primary/10\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":266},"slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-1.5 w-full grow overflow-hidden rounded-full bg-primary/20\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1037},"sonner.tsx":{"content":"\"use client\"\n\nimport { useTheme } from \"next-themes\"\nimport { Toaster as Sonner } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n","size_bytes":894},"storage.ts":{"content":"import { users, type User, type InsertUser } from \"@shared/schema\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  currentId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.currentId = 1;\n  }\n\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.currentId++;\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1012},"switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1148},"table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\n      \"p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2859},"tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1877},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":649},"toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-9 px-2 min-w-9\",\n        sm: \"h-8 px-1.5 min-w-8\",\n        lg: \"h-10 px-2.5 min-w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1486},"tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Portal>\n    <TooltipPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </TooltipPrimitive.Portal>\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1217},"use-is-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"useAudio.tsx":{"content":"import { create } from \"zustand\";\n\ninterface AudioState {\n  backgroundMusic: HTMLAudioElement | null;\n  hitSound: HTMLAudioElement | null;\n  successSound: HTMLAudioElement | null;\n  isMuted: boolean;\n  \n  // Setter functions\n  initializeAudio: () => void;\n  \n  // Control functions\n  toggleMute: () => void;\n  playHit: () => void;\n  playSuccess: () => void;\n}\n\nexport const useAudio = create<AudioState>((set, get) => ({\n  backgroundMusic: null,\n  hitSound: null,\n  successSound: null,\n  isMuted: false, // Start unmuted\n  \n  initializeAudio: () => {\n    try {\n      const backgroundMusic = new Audio('/sounds/background.mp3');\n      const hitSound = new Audio('/sounds/hit.mp3');\n      const successSound = new Audio('/sounds/success.mp3');\n      \n      // Preload audio files\n      backgroundMusic.preload = 'auto';\n      hitSound.preload = 'auto';\n      successSound.preload = 'auto';\n      \n      set({\n        backgroundMusic,\n        hitSound,\n        successSound\n      });\n      \n      console.log(\"Audio initialized\");\n    } catch (error) {\n      console.log(\"Audio initialization failed:\", error);\n    }\n  },\n  \n  toggleMute: () => {\n    const { isMuted, backgroundMusic } = get();\n    const newMutedState = !isMuted;\n    \n    if (backgroundMusic) {\n      if (newMutedState) {\n        backgroundMusic.pause();\n      } else {\n        backgroundMusic.play().catch(console.log);\n      }\n    }\n    \n    set({ isMuted: newMutedState });\n    console.log(`Sound ${newMutedState ? 'muted' : 'unmuted'}`);\n  },\n  \n  playHit: () => {\n    const { hitSound, isMuted } = get();\n    if (hitSound && !isMuted) {\n      const soundClone = hitSound.cloneNode() as HTMLAudioElement;\n      soundClone.volume = 0.4;\n      soundClone.play().catch(console.log);\n    }\n  },\n  \n  playSuccess: () => {\n    const { successSound, isMuted } = get();\n    if (successSound && !isMuted) {\n      successSound.currentTime = 0;\n      successSound.volume = 0.3;\n      successSound.play().catch(console.log);\n    }\n  }\n}));\n","size_bytes":1997},"useGame.tsx":{"content":"import { create } from \"zustand\";\nimport { subscribeWithSelector } from \"zustand/middleware\";\n\nexport type GamePhase = \"ready\" | \"playing\" | \"ended\";\n\ninterface GameState {\n  phase: GamePhase;\n  \n  // Actions\n  start: () => void;\n  restart: () => void;\n  end: () => void;\n}\n\nexport const useGame = create<GameState>()(\n  subscribeWithSelector((set) => ({\n    phase: \"ready\",\n    \n    start: () => {\n      set((state) => {\n        // Only transition from ready to playing\n        if (state.phase === \"ready\") {\n          return { phase: \"playing\" };\n        }\n        return {};\n      });\n    },\n    \n    restart: () => {\n      set(() => ({ phase: \"ready\" }));\n    },\n    \n    end: () => {\n      set((state) => {\n        // Only transition from playing to ended\n        if (state.phase === \"playing\") {\n          return { phase: \"ended\" };\n        }\n        return {};\n      });\n    }\n  }))\n);\n","size_bytes":893},"useRoguelike.tsx":{"content":"import { create } from \"zustand\";\nimport { subscribeWithSelector } from \"zustand/middleware\";\nimport { GameEngine } from \"../game/GameEngine\";\nimport { GameState, Player, Entity, Tile, Message } from \"../game/entities\";\nimport { useAudio } from \"./useAudio\";\n\ninterface RoguelikeState {\n  gameState: GameState | null;\n  gameEngine: GameEngine | null;\n  \n  // Actions\n  initializeGame: () => void;\n  startGame: () => void;\n  handleInput: (key: string) => void;\n  updateGame: () => void;\n  addMessage: (text: string, type?: 'info' | 'damage' | 'success') => void;\n  \n  // Inventory actions\n  toggleInventory: () => void;\n  closeInventory: () => void;\n  useItem: (index: number) => void;\n  equipItem: (index: number) => void;\n  deleteItem: (index: number) => void;\n  mergeItems: (index1: number, index2: number) => void;\n  unequipItem: (type: 'weapon' | 'armor' | 'aura') => void;\n}\n\nexport const useRoguelike = create<RoguelikeState>()(\n  subscribeWithSelector((set, get) => ({\n    gameState: null,\n    gameEngine: null,\n\n    initializeGame: () => {\n      console.log(\"Initializing Roguelike Game\");\n      const engine = new GameEngine();\n      const initialState = engine.initialize();\n      \n      set({\n        gameEngine: engine,\n        gameState: initialState\n      });\n    },\n\n    startGame: () => {\n      const { gameEngine } = get();\n      if (gameEngine) {\n        const newState = gameEngine.startGame();\n        set({ gameState: newState });\n        \n        // Start background music\n        const audio = useAudio.getState();\n        if (audio.backgroundMusic && !audio.isMuted) {\n          audio.backgroundMusic.loop = true;\n          audio.backgroundMusic.volume = 0.3;\n          audio.backgroundMusic.play().catch(console.log);\n        }\n      }\n    },\n\n    handleInput: (key: string) => {\n      const { gameEngine, gameState } = get();\n      if (!gameEngine || !gameState || gameState.gamePhase !== 'playing') return;\n\n      let newState = gameState;\n      \n      // Handle movement\n      if (['w', 'W', 'ArrowUp', 's', 'S', 'ArrowDown', 'a', 'A', 'ArrowLeft', 'd', 'D', 'ArrowRight'].includes(key)) {\n        // If inventory is open and we press a movement key, close it but don't move\n        if (gameState.showInventory) {\n          get().closeInventory();\n          return;\n        }\n        \n        let dx = 0, dy = 0;\n        \n        switch (key.toLowerCase()) {\n          case 'w':\n          case 'arrowup':\n            dy = -1;\n            break;\n          case 's':\n          case 'arrowdown':\n            dy = 1;\n            break;\n          case 'a':\n          case 'arrowleft':\n            dx = -1;\n            break;\n          case 'd':\n          case 'arrowright':\n            dx = 1;\n            break;\n        }\n        \n        newState = gameEngine.movePlayer(dx, dy);\n        \n        // Ensure inventory stays closed after movement\n        if (newState.showInventory) {\n          newState = { ...newState, showInventory: false };\n        }\n      }\n      \n      // Handle other actions (but not if inventory is open)\n      if (!gameState.showInventory) {\n        switch (key.toLowerCase()) {\n          case ' ':  // Attack\n            newState = gameEngine.playerAttack();\n            break;\n          case 'e':  // Use stairs or interact\n            newState = gameEngine.useStairs();\n            break;\n          case 'r':  // Restart\n            get().initializeGame();\n            return;\n        }\n      }\n      \n      // Handle inventory actions (always available)\n      switch (key.toLowerCase()) {\n        case 'i':  // Toggle inventory\n          get().toggleInventory();\n          return;\n        case 'escape':\n          get().closeInventory();\n          return;\n      }\n      \n      if (newState !== gameState) {\n        // Preserve the current inventory state\n        const currentInventoryState = get().gameState?.showInventory || false;\n        const finalState = { ...newState, showInventory: currentInventoryState };\n        \n        set({ gameState: finalState });\n        \n        // Update game loop (enemy turns, etc.)\n        setTimeout(() => {\n          const currentState = get().gameState;\n          if (currentState && currentState.gamePhase === 'playing') {\n            const updatedState = gameEngine.updateGame();\n            // Preserve inventory state during game updates\n            const preservedState = { \n              ...updatedState, \n              showInventory: currentState.showInventory \n            };\n            set({ gameState: preservedState });\n          }\n        }, 100);\n      }\n    },\n\n    updateGame: () => {\n      const { gameEngine } = get();\n      if (gameEngine) {\n        const newState = gameEngine.updateGame();\n        set({ gameState: newState });\n      }\n    },\n\n    addMessage: (text: string, type: 'info' | 'damage' | 'success' = 'info') => {\n      set(state => {\n        if (!state.gameState) return state;\n        \n        const newMessage: Message = { text, type, timestamp: Date.now() };\n        const messages = [...state.gameState.messages, newMessage];\n        \n        // Keep only last 50 messages\n        if (messages.length > 50) {\n          messages.splice(0, messages.length - 50);\n        }\n        \n        return {\n          gameState: {\n            ...state.gameState,\n            messages\n          }\n        };\n      });\n    },\n\n    toggleInventory: () => {\n      set(state => {\n        if (!state.gameState) return state;\n        return {\n          gameState: {\n            ...state.gameState,\n            showInventory: !state.gameState.showInventory\n          }\n        };\n      });\n    },\n\n    closeInventory: () => {\n      set(state => {\n        if (!state.gameState) return state;\n        return {\n          gameState: {\n            ...state.gameState,\n            showInventory: false\n          }\n        };\n      });\n    },\n\n    useItem: (index: number) => {\n      const { gameEngine } = get();\n      if (gameEngine) {\n        const newState = gameEngine.useItem(index);\n        set({ gameState: newState });\n        \n        // Play success sound\n        const audio = useAudio.getState();\n        audio.playSuccess();\n        \n        // Keep inventory open\n      }\n    },\n\n    equipItem: (index: number) => {\n      const { gameEngine } = get();\n      if (gameEngine) {\n        const newState = gameEngine.equipItem(index);\n        set({ gameState: newState });\n        \n        // Play success sound\n        const audio = useAudio.getState();\n        audio.playSuccess();\n        \n        // Keep inventory open\n      }\n    },\n\n    deleteItem: (index: number) => {\n      const { gameEngine } = get();\n      if (gameEngine) {\n        const newState = gameEngine.deleteItem(index);\n        set({ gameState: newState });\n      }\n    },\n\n    mergeItems: (index1: number, index2: number) => {\n      const { gameEngine, gameState } = get();\n      if (!gameEngine || !gameState) return;\n\n      const item1 = gameState.player.inventory[index1];\n      const item2 = gameState.player.inventory[index2];\n\n      if (!item1 || !item2 || item1.type !== item2.type || item1.rarity !== item2.rarity) {\n        console.log('Cannot merge items of different types or rarities');\n        return;\n      }\n\n      // Check if we have at least 3 items of this type and rarity\n      const matchingItems = gameState.player.inventory.filter(item => \n        item.type === item1.type && item.rarity === item1.rarity\n      );\n      \n      if (matchingItems.length < 3) {\n        console.log('Need at least 3 items of the same type and rarity to merge');\n        return;\n      }\n\n      const newState = gameEngine.mergeItems(index1, index2);\n      set({ gameState: newState });\n      \n      // Play success sound\n      const audio = useAudio.getState();\n      audio.playSuccess();\n    },\n\n    unequipItem: (type: 'weapon' | 'armor' | 'aura') => {\n      const { gameEngine } = get();\n      if (gameEngine) {\n        const newState = gameEngine.unequipItem(type);\n        set({ gameState: newState });\n        \n        // Play success sound\n        const audio = useAudio.getState();\n        audio.playSuccess();\n      }\n    }\n  }))\n);\n\n// Initialize audio when store is created\nuseRoguelike.subscribe(\n  state => state.gameState,\n  (gameState) => {\n    if (gameState?.gamePhase === 'gameOver') {\n      // Stop background music on game over\n      const audio = useAudio.getState();\n      if (audio.backgroundMusic) {\n        audio.backgroundMusic.pause();\n        audio.backgroundMusic.currentTime = 0;\n      }\n    }\n  }\n);\n","size_bytes":8523},"utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nconst getLocalStorage = (key: string): any =>\n  JSON.parse(window.localStorage.getItem(key) || \"null\");\nconst setLocalStorage = (key: string, value: any): void =>\n  window.localStorage.setItem(key, JSON.stringify(value));\n\nexport { getLocalStorage, setLocalStorage };\n","size_bytes":438},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path, { dirname } from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\nimport { fileURLToPath } from \"url\";\nimport glsl from \"vite-plugin-glsl\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    glsl(), // Add GLSL shader support\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  // Add support for large models and audio files\n  assetsInclude: [\"**/*.gltf\", \"**/*.glb\", \"**/*.mp3\", \"**/*.ogg\", \"**/*.wav\"],\n});\n","size_bytes":896},"vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path, { dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { createServer as createViteServer, createLogger, type ServerOptions } from \"vite\";\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions: ServerOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        __dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(__dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2409}}}